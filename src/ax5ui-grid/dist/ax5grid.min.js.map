{"version":3,"sources":["ax5grid.js","ax5grid-body.js","ax5grid-collector.js","ax5grid-data.js","ax5grid-excel.js","ax5grid-formatter.js","ax5grid-header.js","ax5grid-inline-editor.js","ax5grid-page.js","ax5grid-scroller.js","ax5grid-tmpl.js","ax5grid-util.js"],"names":["UI","ax5","ui","U","util","GRID","addClass","className","version","ax5grid","self","this","cfg","ctrlKeys","33","34","35","36","37","38","39","40","instanceId","getGuid","config","theme","animateTime","debounceTime","appendDebouncer","appendDebounceTimes","appendProgressIcon","appendProgress","frozenColumnIndex","frozenRowIndex","showLineNumber","showRowSelector","multipleSelect","virtualScrollX","height","columnMinWidth","lineNumberColumnWidth","rowSelectorColumnWidth","sortable","undefined","remoteSort","header","display","align","columnHeight","columnPadding","columnBorderWidth","body","grouping","mergeCells","rightSum","footSum","page","navigationItemCount","scroller","size","barMinSize","trackPadding","columnKeys","selected","modified","deleted","disableSelection","tree","use","hashDigit","parentKey","selfKey","collapse","hidden","parentHash","childHash","children","childrenLength","xvar","bodyTrHeight","scrollContentWidth","scrollContentHeight","columns","colGroup","footSumColumns","bodyGrouping","list","selectedDataIndexs","deletedList","sortInfo","focusedColumn","selectedColumn","isInlineEditing","inlineEditing","headerTable","leftHeaderData","headerData","rightHeaderData","bodyRowTable","leftBodyRowData","bodyRowData","rightBodyRowData","bodyRowMap","bodyGroupingTable","leftBodyGroupingData","bodyGroupingData","rightBodyGroupingData","bodyGroupingMap","footSumTable","leftFootSumData","footSumData","needToPaintSum","initGrid","data","id","$target","html","tmpl","get","$","container","find","root","panel","aside-header","left-header","header-scroll","right-header","top-aside-body","top-left-body","top-body","top-body-scroll","top-right-body","aside-body","aside-body-scroll","left-body","left-body-scroll","body-scroll","right-body","right-body-scroll","bottom-aside-body","bottom-left-body","bottom-body","bottom-body-scroll","bottom-right-body","livePanelKeys","vertical","vertical-bar","horizontal","horizontal-bar","corner","navigation","status","form","clipboard","resizer","css","_height","initColumns","_columns","deepCopy","makeHeaderTable","call","length","makeBodyRowTable","makeBodyRowMap","rows","colGroupMap","r","rl","row","c","cl","cols","colIndex","jQuery","extend","k","push","onResetColumns","resetColGroupWidth","initFootSum","initBodyGroup","alignGrid","repaint","resize","CT_WIDTH","width","totalWidth","computedWidth","autoWidthColgroupIndexs","i","l","isNumber","_width","right","left","_footSum","isArray","makeFootSumTable","_grouping","by","makeBodyGroupingTable","kl","orderBy","seq","fixed","key","sort","sortFixed","_isFirst","Math","min","innerWidth","innerHeight","CT_HEIGHT","CT_INNER_WIDTH","CT_INNER_HEIGHT","asidePanelWidth","frozenPanelWidth","endIndex","verticalScrollerWidth","horizontalScrollerHeight","bodyHeight","rightPanelWidth","frozenRowHeight","footSumHeight","headerHeight","pageHeight","totalColGroupWidth","bodyWidth","panelDisplayProcess","vPosition","hPosition","containerType","isHide","hide","show","scrollerDisplayProcess","scrollerWidth","scrollerHeight","sortColumns","_sortInfo","isFunction","that","a","b","initData","clearGroupingData","init","_config","target","console","log","info","getError","onStateChanged","onClick","onLoad","onDataChanged","isObject","error","parseJson","attr","grid","window","bind","document","on","e","isPickerClick","findParentNode","_target","getAttribute","focused","blur","which","eventKeys","ESC","keyDown","originalEvent","RETURN","TAB","stopEvent","UP","shiftKey","DOWN","metaKey","ctrlKey","copySelect","SPACE","Object","keys","setTimeout","processor","KEY_UP","moveFocus","KEY_DOWN","KEY_LEFT","KEY_RIGHT","KEY_HOME","KEY_END","INLINE_EDIT","_e","inlineEdit","active","test","keydown","activeEditLength","columnKey","_act","_data","copysuccess","$clipBoard","copyTextArray","copyText","_rowIndex","_colIndex","_dindex","_di","_column","dindex","rowIndex","originalColumn","__isGrouping","forEach","join","innerText","select","execCommand","setData","set","navigationUpdate","scrollTo","top","getList","_type","setHeight","offsetParent","addRow","_row","_options","add","appendToList","_list","append","removeRow","remove","updateRow","update","repaintRow","deleteRow","setValue","_key","_value","repaintCell","_panelName","_rows","__dindex","__key","__value","addColumn","first","concat","last","_cindex","splice","removeColumn","updateColumn","setColumnWidth","columnResizerIndex","getColumnSortInfo","setColumnSort","applySortStatus","_selectObject","selectedClear","clearSelect","updateRowState","selectAll","updateRowStateAll","exportExcel","_fileName","table","getExcelString","excel","export","focus","_pos","selectedIndex","HOME","END","destroy","empty","grid_instance","filter","main","arguments","setConfig","apply","columnSelect","focusClear","panelName","removeAttr","clear","column","editKey","colspan","selectedRange","start","end","deActive","trl","range","s","max","_panels","columnSelector","cell","Number","off","_states","si","cellChecked","checked","_state","col","targetClick","default","item","value","editor","type","getValue","newValue","trueValue","falseValue","editorConfig","rowSelector","internalCall","lineNumber","targetDBLClick","onDBLClick","touchmoved","resetFrozenColumn","dividedBodyRowObj","divideTableByFrozenColumnIndex","asideBodyRowData","dataTable","label","rowspan","_col","columnAttr","leftData","rightData","dividedBodyGroupingObj","asideBodyGroupingData","dividedFootSumObj","getFieldValue","_item","_index","_returnPlainText","tagsToReplace","<",">","_editor","inlineEditor","editMode","disabled","getHtml","formatter","returnValue","replace","tag","getGroupingValue","_label","__groupingList","groupBy","__groupingBy","collector","getSumFieldValue","_reset","paintStartRowIndex","paintStartColumnIndex","floor","position","isNaN","paintEndColumnIndex","nopaintLeftColumnsWidth","nopaintRightColumnsWidth","bodyScrollLeft","ci","_sx","_ex","padding-left","padding-right","isFirstPaint","headerColGroup","bodyAlign","paintRowCount","ceil","dataRowCount","getTableByStartEndColumnIndex","addEventListener","supportTouch","repaintBody","_elTargetKey","_colGroup","_bodyRow","_groupRow","_scrollConfig","_elTarget","SS","cgi","cgl","di","dl","tri","cellHeight","colAlign","isScrolled","len","isGroupingRow","rowTable","_focusedColumn","_selectedColumn","attrs","tdCSS_class","styleClass","index","_cellHeight","lineHeight","multiLine","innerHTML","repaintSum","isFootSum","mergeCellsBody","tblRowMaps","token","hasMergeTd","tableTrs","ri","tableTrTds","trMaps","childNodes","tdObj","text","_loop","prevTokenColIndexs","_loop2","search","hasFalse","ti","scrollConfig","asideColGroup","slice","leftHeaderColGroup","statusUpdate","_newValue","updateCell","updateWith","updateColumnKey","findPanelByColumnIndex","updateWithCell","abs","replaceGroupTr","replaceTr","noRepaint","_position","UD","_dy","moveResult","while_i","nPanelInfo","LR","_dx","isScrollPanel","containerPanelName","isScrollTo","scrollLeft","$column","newLeft","outerWidth","INDEX","LEFT","RIGHT","_initValue","useReturnToSave","originalValue","initValue","__editor","isNothing","number","money","$inlineEditorCell","$inlineEditor","_msg","editorValue","tagName","val","action","CANCEL","__clear","bindedAx5ui","ax5picker","ax5select","getBody","getSum","po","sum","avg","listLength","round","returnList","appendIndex","dataRealRowCount","groupingKeys","map","compareString","gi","gl","appendRow","ari","appendRowItem","labels","ki","arrangeData4tree","li","listIndexMap","setDigit","_parent","_parentHash","lastIndex","Function","getRealPathForDataItem","_selected","sortInfoArray","getKeyValue","order","_a_val","_b_val","_a","_b","_typeof","_callback","appendIdle","clearTimeout","base64","btoa","unescape","encodeURIComponent","uri","getExcelTmpl","tableToExcel","fileName","output","tables","mustache","render","worksheet","arr","t","name","isChrome","navigator","userAgent","indexOf","isSafari","isIE","documentMode","blob1","blankWindow","$iframe","iframe","anchor","msSaveOrOpenBlob","Blob","open","write","close","appendChild","createElement","download","href","click","removeChild","columnResizerEvent","_columnResizer","$columnResizer","columnResizerPositionLeft","offset","gridTargetOffsetLeft","resizeRange","ENM","mouseObj","getMousePosition","__da","clientX","mousePosition","columnResizerLived","removeClass","unbind","toggleSort","dividedHeaderObj","asideHeaderData","headerAlign","repaintHeader","tableWidth","trCSS_class","_SS","enableFilter","resizerHeight","resizerLeft","AS","sortOrder","multiSort","getHeader","edit_text","_root","_columnKey","_$parent","$el","bindUI","_$el","edit_money","ax5formatter","pattern","edit_number","edit_date","direction","content","state","activePicker","edit_select","eConfig","optionValue","optionText","optionSelected","options","n","activeSelectOptionGroup","edit_checkbox","marginTop","date","checkbox","onclickPageMove","callback","_pageNo","currentPage","selectPage","onChange","prev","pageNo","next","totalPages","hasPage","pageSize","totalElements","firstIcon","prevIcon","nextIcon","lastIcon","returns","startI","endI","p","act","fromRowIndex","toRowIndex","progress","convertScrollPosition","_var","_content_height","_panel_height","_scroller_height","_vertical_scroller_height","verticalScrollBarHeight","_content_width","_panel_width","_scroller_width","_horizontal_scroller_width","horizontalScrollBarWidth","convertScrollBarPosition","_top","scrollPositon","_left","scrollBarMover","track","bar","Date","getTime","moveout_timer","trackOffset","barBox","outerHeight","trackBox","getScrollerPosition","newTop","clientY","barOffset","scrollContentMover","wheel","delta","_body_scroll_position","_top_is_end","_left_is_end","x","y","getContentPosition","__x_da","__y_da","margin","E","detail","deltaY","wheelDelta","deltaX","page_navigation","page_status","tmplName","_table","_frozenColumnIndex","tempTable_l","tempTable_r","colStartIndex","colEndIndex","leftCol","rightCol","_startColumnIndex","_endColumnIndex","tempTable","changedTouches","pageX","pageY","mousedown","mousemove","mouseup","maekRows","depth","parentField","field","selfMakeRow","__columns","_footSumColumns","footSumRow","addC","_bodyGroupingColumns","_containerPanelName","_isScrollPanel","_dataPath","path","_path","split"],"mappings":"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","file":"ax5grid.min.js","sourcesContent":["/*\n * Copyright (c) 2016. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n// ax5.ui.grid\n(function () {\n\n    let UI = ax5.ui,\n        U = ax5.util,\n        GRID;\n\n    UI.addClass({\n        className: \"grid\",\n        version: \"${VERSION}\"\n    }, (function () {\n        /**\n         * @class ax5grid\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var myGrid = new ax5.ui.grid();\n         * ```\n         */\n        let ax5grid = function () {\n            let self = this,\n                cfg,\n                ctrlKeys = {\n                    \"33\": \"KEY_PAGEUP\",\n                    \"34\": \"KEY_PAGEDOWN\",\n                    \"35\": \"KEY_END\",\n                    \"36\": \"KEY_HOME\",\n                    \"37\": \"KEY_LEFT\",\n                    \"38\": \"KEY_UP\",\n                    \"39\": \"KEY_RIGHT\",\n                    \"40\": \"KEY_DOWN\"\n                };\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                debounceTime: 250,\n                appendDebouncer: null,\n                appendDebounceTimes: 0,\n                appendProgressIcon: '...',\n                appendProgress: false,\n\n                // 틀고정 속성\n                frozenColumnIndex: 0,\n                frozenRowIndex: 0,\n                showLineNumber: false,\n                showRowSelector: false,\n                multipleSelect: true,\n                virtualScrollX: true,\n                height: 0,\n                columnMinWidth: 100,\n                lineNumberColumnWidth: 30,\n                rowSelectorColumnWidth: 26,\n                sortable: undefined,\n                remoteSort: false,\n\n                header: {\n                    display: true,\n                    align: false,\n                    columnHeight: 26,\n                    columnPadding: 3,\n                    columnBorderWidth: 1\n                },\n                body: {\n                    align: false,\n                    columnHeight: 26,\n                    columnPadding: 3,\n                    columnBorderWidth: 1,\n                    grouping: false,\n                    mergeCells: false\n                },\n                rightSum: false,\n                footSum: false,\n                page: {\n                    height: 25,\n                    display: true,\n                    navigationItemCount: 5\n                },\n                scroller: {\n                    size: 15,\n                    barMinSize: 15,\n                    trackPadding: 4\n                },\n                columnKeys: {\n                    selected: '__selected__',\n                    modified: '__modified__',\n                    deleted: '__deleted__',\n                    disableSelection: '__disable_selection__'\n                },\n                tree: {\n                    use: false,\n                    hashDigit: 8,\n                    columnKeys: {\n                        parentKey: \"pid\",\n                        selfKey: \"id\",\n                        collapse: \"collapse\",\n                        hidden: \"hidden\",\n                        parentHash: \"__hp__\",\n                        childHash: \"__hc__\",\n                        children: \"__children__\",\n                        childrenLength: \"__childrenLength__\",\n                    }\n                }\n            };\n            this.xvar = {\n                bodyTrHeight: 0, // 한줄의 높이\n                scrollContentWidth: 0, // 스크롤 될 내용물의 너비 (스크롤 될 내용물 : panel['body-scroll'] 안에 컬럼이 있는)\n                scrollContentHeight: 0 // 스크롤 된 내용물의 높이\n            };\n\n            // 그리드 데이터셋\n            this.columns = []; // config.columns에서 복제된 오브젝트\n            this.colGroup = []; // columns를 table태그로 출력하기 좋게 변환한 오브젝트\n            this.footSumColumns = [];\n            this.bodyGrouping = {};\n\n            this.list = []; // 그리드의 데이터\n            this.page = {}; // 그리드의 페이지 정보\n            this.selectedDataIndexs = [];\n            this.deletedList = [];\n            this.sortInfo = {}; // 그리드의 헤더 정렬 정보\n            this.focusedColumn = {}; // 그리드 바디의 포커스된 셀 정보\n            this.selectedColumn = {}; // 그리드 바디의 선택된 셀 정보\n            this.isInlineEditing = false;\n            this.inlineEditing = {};\n\n            // header\n            this.headerTable = {};\n            this.leftHeaderData = {};\n            this.headerData = {};\n            this.rightHeaderData = {};\n\n            // body\n            this.bodyRowTable = {};\n            this.leftBodyRowData = {};\n            this.bodyRowData = {};\n            this.rightBodyRowData = {};\n            this.bodyRowMap = {};\n\n            this.bodyGroupingTable = {};\n            this.leftBodyGroupingData = {};\n            this.bodyGroupingData = {};\n            this.rightBodyGroupingData = {};\n            this.bodyGroupingMap = {};\n\n            // footSum\n            this.footSumTable = {}; // footSum의 출력레이아웃\n            this.leftFootSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 왼쪽\n            this.footSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 오른쪽\n            this.needToPaintSum = true; // 데이터 셋이 변경되어 summary 변경 필요여부\n\n            cfg = this.config;\n\n            const onStateChanged = function (_opts, _that) {\n                if (_opts && _opts.onStateChanged) {\n                    _opts.onStateChanged.call(_that, _that);\n                }\n                else if (this.onStateChanged) {\n                    this.onStateChanged.call(_that, _that);\n                }\n                return true;\n            };\n            const initGrid = function () {\n                // 그리드 템플릿에 전달하고자 하는 데이터를 정리합시다.\n\n                let data = {\n                    instanceId: this.id\n                };\n\n                this.$target.html(GRID.tmpl.get(\"main\", data));\n\n                // 그리드 패널 프레임의 각 엘리먼트를 캐쉬합시다.\n                this.$ = {\n                    \"container\": {\n                        \"hidden\": this.$target.find('[data-ax5grid-container=\"hidden\"]'),\n                        \"root\": this.$target.find('[data-ax5grid-container=\"root\"]'),\n                        \"header\": this.$target.find('[data-ax5grid-container=\"header\"]'),\n                        \"body\": this.$target.find('[data-ax5grid-container=\"body\"]'),\n                        \"page\": this.$target.find('[data-ax5grid-container=\"page\"]'),\n                        \"scroller\": this.$target.find('[data-ax5grid-container=\"scroller\"]')\n                    },\n                    \"panel\": {\n                        \"aside-header\": this.$target.find('[data-ax5grid-panel=\"aside-header\"]'),\n                        \"left-header\": this.$target.find('[data-ax5grid-panel=\"left-header\"]'),\n                        \"header\": this.$target.find('[data-ax5grid-panel=\"header\"]'),\n                        \"header-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"header\"]'),\n                        \"right-header\": this.$target.find('[data-ax5grid-panel=\"right-header\"]'),\n                        \"top-aside-body\": this.$target.find('[data-ax5grid-panel=\"top-aside-body\"]'),\n                        \"top-left-body\": this.$target.find('[data-ax5grid-panel=\"top-left-body\"]'),\n                        \"top-body\": this.$target.find('[data-ax5grid-panel=\"top-body\"]'),\n                        \"top-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"top-body\"]'),\n                        \"top-right-body\": this.$target.find('[data-ax5grid-panel=\"top-right-body\"]'),\n                        \"aside-body\": this.$target.find('[data-ax5grid-panel=\"aside-body\"]'),\n                        \"aside-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"aside-body\"]'),\n                        \"left-body\": this.$target.find('[data-ax5grid-panel=\"left-body\"]'),\n                        \"left-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"left-body\"]'),\n                        \"body\": this.$target.find('[data-ax5grid-panel=\"body\"]'),\n                        \"body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"body\"]'),\n                        \"right-body\": this.$target.find('[data-ax5grid-panel=\"right-body\"]'),\n                        \"right-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"right-body\"]'),\n                        \"bottom-aside-body\": this.$target.find('[data-ax5grid-panel=\"bottom-aside-body\"]'),\n                        \"bottom-left-body\": this.$target.find('[data-ax5grid-panel=\"bottom-left-body\"]'),\n                        \"bottom-body\": this.$target.find('[data-ax5grid-panel=\"bottom-body\"]'),\n                        \"bottom-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"bottom-body\"]'),\n                        \"bottom-right-body\": this.$target.find('[data-ax5grid-panel=\"bottom-right-body\"]')\n                    },\n                    \"livePanelKeys\": [], // 현재 사용중인 패널들 (grid-body repaint에서 수집하여 처리)\n                    \"scroller\": {\n                        \"vertical\": this.$target.find('[data-ax5grid-scroller=\"vertical\"]'),\n                        \"vertical-bar\": this.$target.find('[data-ax5grid-scroller=\"vertical-bar\"]'),\n                        \"horizontal\": this.$target.find('[data-ax5grid-scroller=\"horizontal\"]'),\n                        \"horizontal-bar\": this.$target.find('[data-ax5grid-scroller=\"horizontal-bar\"]'),\n                        \"corner\": this.$target.find('[data-ax5grid-scroller=\"corner\"]')\n                    },\n                    \"page\": {\n                        \"navigation\": this.$target.find('[data-ax5grid-page=\"navigation\"]'),\n                        \"status\": this.$target.find('[data-ax5grid-page=\"status\"]')\n                    },\n                    \"form\": {\n                        \"clipboard\": this.$target.find('[data-ax5grid-form=\"clipboard\"]')\n                    },\n                    \"resizer\": {\n                        \"vertical\": this.$target.find('[data-ax5grid-resizer=\"vertical\"]'),\n                        \"horizontal\": this.$target.find('[data-ax5grid-resizer=\"horizontal\"]')\n                    }\n                };\n\n                this.$[\"container\"][\"root\"].css({height: this.config.height || this.config._height});\n\n                return this;\n            };\n            const initColumns = function (_columns) {\n                this.columns = U.deepCopy(_columns);\n                this.headerTable = GRID.util.makeHeaderTable.call(this, this.columns);\n                this.xvar.frozenColumnIndex = (cfg.frozenColumnIndex > this.columns.length) ? this.columns.length : cfg.frozenColumnIndex;\n\n                this.bodyRowTable = GRID.util.makeBodyRowTable.call(this, this.columns);\n                this.bodyRowMap = GRID.util.makeBodyRowMap.call(this, this.bodyRowTable);\n                // 바디에 표현될 한줄의 높이를 계산합니다.\n                this.xvar.bodyTrHeight = this.bodyRowTable.rows.length * this.config.body.columnHeight;\n\n                let colGroupMap = {};\n                for (let r = 0, rl = this.headerTable.rows.length; r < rl; r++) {\n                    let row = this.headerTable.rows[r];\n                    for (let c = 0, cl = row.cols.length; c < cl; c++) {\n                        colGroupMap[row.cols[c].colIndex] = jQuery.extend({}, row.cols[c]);\n                    }\n                }\n\n                this.colGroup = [];\n                for (var k in colGroupMap) {\n                    this.colGroup.push(colGroupMap[k]);\n                }\n\n                return this;\n            };\n            const onResetColumns = function () {\n                initColumns.call(this, this.config.columns);\n                resetColGroupWidth.call(this);\n                if (this.config.footSum) {\n                    initFootSum.call(this, this.config.footSum);\n                    this.needToPaintSum = true;\n                }\n                if (this.config.body.grouping) initBodyGroup.call(this, this.config.body.grouping);\n                alignGrid.call(this, true);\n                GRID.header.repaint.call(this, true);\n                GRID.body.repaint.call(this, true);\n                GRID.scroller.resize.call(this);\n            };\n            const resetColGroupWidth = function () {\n                /// !! 그리드 target의 크기가 변경되면 이 함수를 호출하려 this.colGroup의 _width 값을 재 계산 하여야 함. [tom]\n                let CT_WIDTH = this.$[\"container\"][\"root\"].width() - (function () {\n                            let width = 0;\n                            if (cfg.showLineNumber) width += cfg.lineNumberColumnWidth;\n                            if (cfg.showRowSelector) width += cfg.rowSelectorColumnWidth;\n                            return width;\n                        })(),\n                    totalWidth = 0, computedWidth, autoWidthColgroupIndexs = [],\n                    colGroup = this.colGroup,\n                    i, l;\n\n                for (i = 0, l = colGroup.length; i < l; i++) {\n                    if (U.isNumber(colGroup[i].width)) {\n                        totalWidth += colGroup[i]._width = colGroup[i].width;\n                    } else if (colGroup[i].width === \"*\") {\n                        autoWidthColgroupIndexs.push(i);\n                    } else if (U.right(colGroup[i].width, 1) === \"%\") {\n                        totalWidth += colGroup[i]._width = CT_WIDTH * U.left(colGroup[i].width, \"%\") / 100;\n                    }\n                }\n                if (autoWidthColgroupIndexs.length > 0) {\n                    computedWidth = (CT_WIDTH - totalWidth) / autoWidthColgroupIndexs.length;\n                    for (i = 0, l = autoWidthColgroupIndexs.length; i < l; i++) {\n                        colGroup[autoWidthColgroupIndexs[i]]._width = computedWidth;\n                    }\n                }\n            };\n            const initFootSum = function (_footSum) {\n                if (U.isArray(_footSum)) {\n                    this.footSumTable = GRID.util.makeFootSumTable.call(this, this.footSumColumns = _footSum);\n                } else {\n                    this.footSumColumns = [];\n                    this.footSumTable = {};\n                }\n            };\n            const initBodyGroup = function (_grouping) {\n                let grouping = jQuery.extend({}, _grouping);\n                if (\"by\" in grouping && \"columns\" in grouping) {\n                    this.bodyGrouping = {\n                        by: grouping.by,\n                        columns: grouping.columns\n                    };\n                    this.bodyGroupingTable = GRID.util.makeBodyGroupingTable.call(this, this.bodyGrouping.columns);\n                    this.sortInfo = (function () {\n                        let sortInfo = {};\n                        for (let k = 0, kl = this.bodyGrouping.by.length; k < kl; k++) {\n                            sortInfo[this.bodyGrouping.by[k]] = {\n                                orderBy: \"asc\",\n                                seq: k,\n                                fixed: true\n                            };\n                            for (let c = 0, cl = this.colGroup.length; c < cl; c++) {\n                                if (this.colGroup[c].key === this.bodyGrouping.by[k]) {\n                                    this.colGroup[c].sort = \"asc\";\n                                    this.colGroup[c].sortFixed = true;\n                                }\n                            }\n                        }\n                        return sortInfo;\n                    }).call(this);\n                } else {\n                    cfg.body.grouping = false;\n                }\n            };\n            const alignGrid = function (_isFirst) {\n                // 대상이 크기가 컬럼의 최소 크기 보다 작업 금지\n                if (Math.min(this.$target.innerWidth(), this.$target.innerHeight()) < 5) {\n                    return false;\n                }\n\n                if (!this.config.height) {\n                    this.$[\"container\"][\"root\"].css({height: this.config._height = this.$target.height()});\n                }\n\n                let CT_WIDTH = this.$[\"container\"][\"root\"].width(),\n                    CT_HEIGHT = this.$[\"container\"][\"root\"].height(),\n                    CT_INNER_WIDTH = CT_WIDTH,\n                    CT_INNER_HEIGHT = CT_HEIGHT,\n                    asidePanelWidth = cfg.asidePanelWidth = (function () {\n                        let width = 0;\n                        if (cfg.showLineNumber) width += cfg.lineNumberColumnWidth;\n                        if (cfg.showRowSelector) width += cfg.rowSelectorColumnWidth;\n                        return width;\n                    })(),\n                    frozenPanelWidth = cfg.frozenPanelWidth = (function (colGroup, endIndex) {\n                        let width = 0;\n                        for (let i = 0, l = endIndex; i < l; i++) {\n                            width += colGroup[i]._width;\n                        }\n                        return width;\n                    })(this.colGroup, cfg.frozenColumnIndex),\n                    verticalScrollerWidth, horizontalScrollerHeight, bodyHeight;\n\n                // todo : 우측 함계컬럼 너비 계산\n                let rightPanelWidth = 0,\n                    frozenRowHeight = (function (bodyTrHeight) {\n                        return cfg.frozenRowIndex * bodyTrHeight;\n                    })(this.xvar.bodyTrHeight),\n                    footSumHeight = (function (bodyTrHeight) {\n                        return this.footSumColumns.length * bodyTrHeight;\n                    }).call(this, this.xvar.bodyTrHeight),\n                    headerHeight = (cfg.header.display) ? this.headerTable.rows.length * cfg.header.columnHeight : 0,\n                    pageHeight = (cfg.page.display) ? cfg.page.height : 0;\n\n                (function () {\n                    verticalScrollerWidth = ((CT_HEIGHT - headerHeight - pageHeight - footSumHeight) < this.list.length * this.xvar.bodyTrHeight) ? this.config.scroller.size : 0;\n                    // 남은 너비가 colGroup의 너비보다 넓을때. 수평 스크롤 활성화.\n                    horizontalScrollerHeight = (function () {\n                        let totalColGroupWidth = 0;\n                        // aside 빼고 너비\n                        // 수직 스크롤이 있으면 또 빼고 비교\n                        let bodyWidth = CT_WIDTH - asidePanelWidth - verticalScrollerWidth;\n                        for (let i = 0, l = this.colGroup.length; i < l; i++) {\n                            totalColGroupWidth += this.colGroup[i]._width;\n                        }\n                        return (totalColGroupWidth > bodyWidth) ? this.config.scroller.size : 0;\n                    }).call(this);\n\n                    if (horizontalScrollerHeight > 0) {\n                        verticalScrollerWidth = ((CT_HEIGHT - headerHeight - pageHeight - footSumHeight - horizontalScrollerHeight) < this.list.length * this.xvar.bodyTrHeight) ? this.config.scroller.size : 0;\n                    }\n                }).call(this);\n\n                // 수평 너비 결정\n                CT_INNER_WIDTH = CT_WIDTH - verticalScrollerWidth;\n                // 수직 스크롤러의 높이 결정.\n                CT_INNER_HEIGHT = CT_HEIGHT - pageHeight - horizontalScrollerHeight;\n\n                bodyHeight = CT_INNER_HEIGHT - headerHeight;\n\n                let panelDisplayProcess = function (panel, vPosition, hPosition, containerType) {\n                    let css = {},\n                        isHide = false;\n\n                    switch (hPosition) {\n                        case \"aside\":\n                            if (asidePanelWidth === 0) {\n                                isHide = true;\n                            } else {\n                                css[\"left\"] = 0;\n                                css[\"width\"] = asidePanelWidth;\n                            }\n                            break;\n                        case \"left\":\n                            if (cfg.frozenColumnIndex === 0) {\n                                isHide = true;\n                            } else {\n                                css[\"left\"] = asidePanelWidth;\n                                css[\"width\"] = frozenPanelWidth;\n                            }\n                            break;\n                        case \"right\":\n                            if (!cfg.rightSum) {\n                                isHide = true;\n                            } else {\n\n                            }\n                            break;\n                        default:\n                            if (containerType !== \"page\") {\n                                if (cfg.frozenColumnIndex === 0) {\n                                    css[\"left\"] = asidePanelWidth;\n                                } else {\n                                    css[\"left\"] = frozenPanelWidth + asidePanelWidth;\n                                }\n                                css[\"width\"] = CT_INNER_WIDTH - asidePanelWidth - frozenPanelWidth - rightPanelWidth;\n                            }\n                            break;\n                    }\n\n                    if (isHide) {\n                        panel.hide();\n                        // 프로세스 중지\n                        return this;\n                    }\n\n                    if (containerType === \"body\") {\n                        switch (vPosition) {\n                            case \"top\":\n                                if (cfg.frozenRowIndex == 0) {\n                                    isHide = true;\n                                } else {\n                                    css[\"top\"] = 0;\n                                    css[\"height\"] = frozenRowHeight;\n                                }\n                                break;\n                            case \"bottom\":\n                                if (!cfg.footSum) {\n                                    isHide = true;\n                                } else {\n                                    css[\"top\"] = bodyHeight - footSumHeight;\n                                    css[\"height\"] = footSumHeight; // footSum height\n                                }\n                                break;\n                            default:\n                                css[\"top\"] = frozenRowHeight;\n                                css[\"height\"] = bodyHeight - frozenRowHeight - footSumHeight;\n\n                                break;\n                        }\n                    } else if (containerType === \"header\") {\n                        css[\"height\"] = headerHeight;\n                    } else if (containerType === \"page\") {\n                        if (pageHeight == 0) {\n                            isHide = true;\n                        } else {\n                            css[\"height\"] = pageHeight;\n\n                        }\n                    }\n\n                    if (isHide) {\n                        panel.hide();\n                        // 프로세스 중지\n                        return this;\n                    }\n\n                    panel.show().css(css);\n                    return this;\n                };\n                let scrollerDisplayProcess = function (panel, scrollerWidth, scrollerHeight, containerType) {\n                    let css = {},\n                        isHide = false;\n\n                    switch (containerType) {\n                        case \"vertical\":\n                            if (scrollerWidth > 0) {\n                                css[\"width\"] = scrollerWidth;\n                                css[\"height\"] = CT_INNER_HEIGHT;\n                                css[\"bottom\"] = scrollerHeight + pageHeight;\n                            } else {\n                                isHide = true;\n                            }\n                            break;\n                        case \"horizontal\":\n                            if (scrollerHeight > 0) {\n                                css[\"width\"] = CT_INNER_WIDTH;\n                                css[\"height\"] = scrollerHeight;\n                                css[\"right\"] = scrollerWidth;\n                                css[\"bottom\"] = pageHeight;\n                            } else {\n                                isHide = true;\n                            }\n                            break;\n                        case \"corner\":\n                            if (scrollerWidth > 0 && scrollerHeight > 0) {\n                                css[\"width\"] = scrollerWidth;\n                                css[\"height\"] = scrollerHeight;\n                                css[\"bottom\"] = pageHeight;\n                            } else {\n                                isHide = true;\n                            }\n                            break;\n                    }\n\n                    if (isHide) {\n                        panel.hide();\n                        // 프로세스 중지\n                        return this;\n                    }\n\n                    panel.show().css(css);\n                };\n\n                this.$[\"container\"][\"header\"].css({height: headerHeight});\n                this.$[\"container\"][\"body\"].css({height: bodyHeight});\n\n                // 각 패널들의 크기 표시여부를 결정합니다\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-header\"], \"\", \"aside\", \"header\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"left-header\"], \"\", \"left\", \"header\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"header\"], \"\", \"\", \"header\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"right-header\"], \"\", \"right\", \"header\");\n\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-aside-body\"], \"top\", \"aside\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-left-body\"], \"top\", \"left\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-body\"], \"top\", \"\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-right-body\"], \"top\", \"right\", \"body\");\n\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-body\"], \"\", \"aside\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"left-body\"], \"\", \"left\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"body\"], \"\", \"\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"right-body\"], \"\", \"right\", \"body\");\n\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-aside-body\"], \"bottom\", \"aside\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-left-body\"], \"bottom\", \"left\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-body\"], \"bottom\", \"\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-right-body\"], \"bottom\", \"right\", \"body\");\n\n\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"vertical\"], verticalScrollerWidth, horizontalScrollerHeight, \"vertical\");\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"horizontal\"], verticalScrollerWidth, horizontalScrollerHeight, \"horizontal\");\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"corner\"], verticalScrollerWidth, horizontalScrollerHeight, \"corner\");\n\n                panelDisplayProcess.call(this, this.$[\"container\"][\"page\"], \"\", \"\", \"page\");\n\n                // 각 패널의 사이즈 결정\n                /// 다른 패널의 사이즈 정보가 필요한 경우 여기서 정의해주고 사용함.\n                this.xvar.bodyHeight = this.$.panel[\"body\"].height();\n                this.xvar.bodyWidth = this.$.panel[\"body\"].width();\n                // scrollContentWidth 는 grid-header repaint에서 결정합니다. 까먹지 맙시다. > this.xvar.scrollContentWidth\n\n                return true;\n            };\n            const sortColumns = function (_sortInfo) {\n                GRID.header.repaint.call(this);\n\n                if (U.isFunction(this.config.remoteSort)) {\n                    let that = {sortInfo: []};\n                    for (let k in _sortInfo) {\n                        that.sortInfo.push({\n                            key: k,\n                            orderBy: _sortInfo[k].orderBy,\n                            seq: _sortInfo[k].seq\n                        });\n                    }\n                    that.sortInfo.sort(function (a, b) {\n                        return a.seq > b.seq;\n                    });\n                    this.config.remoteSort.call(that, that);\n                } else {\n                    if (this.config.body.grouping) {\n                        this.list = GRID.data.initData.call(this,\n                            GRID.data.sort.call(this,\n                                _sortInfo,\n                                GRID.data.clearGroupingData.call(this,\n                                    this.list\n                                )\n                            )\n                        );\n                    }\n                    else {\n                        this.list = GRID.data.sort.call(this, _sortInfo,\n                            GRID.data.clearGroupingData.call(this,\n                                this.list\n                            )\n                        );\n                    }\n                    GRID.body.repaint.call(this, true);\n                    GRID.scroller.resize.call(this);\n                }\n            };\n            /// private end\n\n            /**\n             * Preferences of grid UI\n             * @method ax5grid.setConfig\n             * @param {Object} _config - 클래스 속성값\n             * @param {Element} _config.target\n             * @param {Number} [_config.frozenColumnIndex=0]\n             * @param {Number} [_config.frozenRowIndex=0]\n             * @param {Boolean} [_config.showLineNumber=false]\n             * @param {Boolean} [_config.showRowSelector=false]\n             * @param {Boolean} [_config.multipleSelect=true]\n             * @param {Number} [_config.columnMinWidth=100]\n             * @param {Number} [_config.lineNumberColumnWidth=30]\n             * @param {Number} [_config.rowSelectorColumnWidth=25]\n             * @param {Boolean} [_config.sortable=false]\n             * @param {Boolean} [_config.multiSort=false]\n             * @param {Function} [_config.remoteSort=false]\n             * @param {Boolean} [_config.virtualScrollX=true]\n             * @param {Object} [_config.header]\n             * @param {String} [_config.header.align]\n             * @param {Number} [_config.header.columnHeight=25]\n             * @param {Number} [_config.header.columnPadding=3]\n             * @param {Number} [_config.header.columnBorderWidth=1]\n             * @param {Object} [_config.body]\n             * @param {Function} [_config.onClick]\n             * @param {Function} [_config.onDBLClick]\n             * @param {String|Array} [_config.body.mergeCells=false] -\n             * @param {String} [_config.body.align]\n             * @param {Number} [_config.body.columnHeight=25]\n             * @param {Number} [_config.body.columnPadding=3]\n             * @param {Number} [_config.body.columnBorderWidth=1]\n             * @param {Object} [_config.body.grouping]\n             * @param {Array} [_config.body.grouping.by] - list grouping keys\n             * @param {Array} [_config.body.grouping.columns] - list grouping columns\n             * @param {Object} [_config.page]\n             * @param {Number} [_config.page.height=25]\n             * @param {Boolean} [_config.page.display=true]\n             * @param {Number} [_config.page.navigationItemCount=5]\n             * @param {Object} [_config.scroller]\n             * @param {Number} [_config.scroller.size=15]\n             * @param {Number} [_config.scroller.barMinSize=15]\n             * @param {Number} [_config.scroller.trackPadding=4]\n             * @param {Object} [_config.columnKeys]\n             * @param {String} [_config.columnKeys.selected=\"_SELECTED\"]\n             * @param {Object[]} _config.columns\n             * @param {String} _config.columns[].key\n             * @param {String} _config.columns[].label\n             * @param {Number} _config.columns[].width\n             * @param {(String|Function)} _config.columns[].styleClass\n             * @param {Boolean} _config.columns[].enableFilter\n             * @param {Boolean} _config.columns[].sortable\n             * @param {String} _config.columns[].align\n             * @param {(String|Function)} _config.columns[].formatter\n             * @param {Object} _config.columns[].editor\n             * @param {String} _config.columns[].editor.type - text,number,money,date\n             * @param {Object} _config.columns[].editor.config\n             * @param {Array} _config.columns[].editor.updateWith\n             * @param {Function} _config.columns[].editor.disabled - disable editor\n             * @param {Boolean} [_config.columns[].multiLine=false]\n             * @param {Object} [_config.tree]\n             * @param {Boolean} [_config.tree.use=false] - Whether tree-type data is used\n             * @param {Object} [_config.tree.columnKeys]\n             * @param {String} [_config.tree.columnKeys.parant]\n             * @param {String} [_config.tree.columnKeys.child]\n             * @param {String} [_config.tree.columnKeys.open]\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * var firstGrid = new ax5.ui.grid();\n             *\n             * ax5.ui.grid.formatter[\"myType\"] = function () {\n             *     return \"myType\" + (this.value || \"\");\n             * };\n             * ax5.ui.grid.formatter[\"capital\"] = function(){\n             *     return (''+this.value).toUpperCase();\n             * };\n             *\n             * ax5.ui.grid.collector[\"myType\"] = function () {\n             *     return \"myType\" + (this.value || \"\");\n             * };\n             *\n             * var sampleData = [\n             *     {a: \"A\", b: \"A01\", price: 1000, amount: 12, cost: 12000, saleDt: \"2016-08-29\", customer: \"장기영\", saleType: \"A\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"B01\", price: 1100, amount: 11, cost: 12100, saleDt: \"2016-08-28\", customer: \"장서우\", saleType: \"B\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"C01\", price: 1200, amount: 10, cost: 12000, saleDt: \"2016-08-27\", customer: \"이영희\", saleType: \"A\"},\n             *     {companyJson: {\"대표자명\":\"위세라\"}, a: \"A\", b: \"A01\", price: 1300, amount: 8, cost: 10400, saleDt: \"2016-08-25\", customer: \"황인서\", saleType: \"C\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"B01\", price: 1400, amount: 5, cost: 7000, saleDt: \"2016-08-29\", customer: \"황세진\", saleType: \"D\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"A01\", price: 1500, amount: 2, cost: 3000, saleDt: \"2016-08-26\", customer: \"이서연\", saleType: \"A\"}\n             * ];\n             *\n             * var gridView = {\n             *     initView: function () {\n             *         firstGrid.setConfig({\n             *             target: $('[data-ax5grid=\"first-grid\"]'),\n             *             columns: [\n             *                 {\n             *                     key: \"companyJson['대표자명']\",\n             *                     label: \"필드A\",\n             *                     width: 80,\n             *                     styleClass: function () {\n             *                         return \"ABC\";\n             *                     },\n             *                     enableFilter: true,\n             *                     align: \"center\",\n             *                     editor: {type:\"text\"}\n             *                 },\n             *                 {key: \"b\", label: \"필드B\", align: \"center\"},\n             *                 {\n             *                     key: undefined, label: \"필드C\", columns: [\n             *                         {key: \"price\", label: \"단가\", formatter: \"money\", align: \"right\"},\n             *                         {key: \"amount\", label: \"수량\", formatter: \"money\", align: \"right\"},\n             *                         {key: \"cost\", label: \"금액\", align: \"right\", formatter: \"money\"}\n             *                     ]\n             *                 },\n             *                 {key: \"saleDt\", label: \"판매일자\", align: \"center\"},\n             *                 {key: \"customer\", label: \"고객명\"},\n             *                 {key: \"saleType\", label: \"판매타입\"}\n             *             ]\n             *         });\n             *         return this;\n             *     },\n             *     setData: function (_pageNo) {\n             *         firstGrid.setData(sampleData);\n             *         return this;\n             *     }\n             * };\n             *\n             * // onClick, onDBLClick, onDataChanged\n             * firstGrid.setConfig({\n             *      target: $('[data-ax5grid=\"first-grid\"]'),\n             *      columns: [...],\n             *      body: {\n             *          onClick: function(){\n             *              console.log(this);\n             *          },\n             *          onDBLClick: function(){\n             *              console.log(this);\n             *              // If the column does not have an editor attribute, an event is raised.\n             *          },\n             *          onDataChanged: function(){\n             *              console.log(this);\n             *              // If change Data\n             *          }\n             *      }\n             * });\n             * ```\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5grid\", \"401\", \"init\"));\n                    return this;\n                }\n\n                // 그리드의 이벤트 정의 구간\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.body.onDataChanged;\n                // todo event에 대한 추가 정의 필요\n\n                this.$target = jQuery(cfg.target);\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5grid-config\"), true));\n\n                let grid = this.config = cfg;\n\n                if (!this.config.height) {\n                    this.config._height = this.$target.height();\n                }\n\n                if (!this.id) this.id = this.$target.data(\"data-ax5grid-id\");\n                if (!this.id) {\n                    //this.id = 'ax5grid-' + ax5.getGuid();\n                    this.id = 'ax5grid-' + this.instanceId;\n                    this.$target.data(\"data-ax5grid-id\", grid.id);\n                }\n\n                ///========\n                // 그리드를 그리기 위한 가장 기초적인 작업 뼈대와 틀을 준비합니다. 이 메소드는 초기화 시 한번만 호출 되게 됩니다.\n                initGrid.call(this);\n\n                // columns데이터를 분석하여 미리 처리해야하는 데이터를 정리합니다.\n                initColumns.call(this, grid.columns);\n                resetColGroupWidth.call(this);\n\n                // footSum 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\n                if (grid.footSum) initFootSum.call(this, grid.footSum);\n\n                // bodyGrouping 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\n                if (grid.body.grouping) initBodyGroup.call(this, grid.body.grouping);\n\n                // 그리드의 각 요소의 크기를 맞춤니다.\n                alignGrid.call(this, true);\n\n                // columns의 데이터로 header데이터를 만들고\n                GRID.header.init.call(this);\n                // header를 출력합니다.\n                GRID.header.repaint.call(this);\n\n                // columns의 데이터로 body데이터를 만들고\n                GRID.body.init.call(this);\n                // body를 출력합니다.\n                GRID.body.repaint.call(this);\n\n                // scroller\n                GRID.scroller.init.call(this);\n                GRID.scroller.resize.call(this);\n\n                jQuery(window).bind(\"resize.ax5grid-\" + this.id, function () {\n                    alignGrid.call(self);\n                    GRID.scroller.resize.call(self);\n                    GRID.body.repaint.call(self);  // window resize시 repaint 함수 호출\n                });\n\n                jQuery(document.body).on(\"click.ax5grid-\" + this.id, (function (e) {\n                    let isPickerClick = false,\n                        target = U.findParentNode(e.target, function (_target) {\n                            if (isPickerClick = _target.getAttribute(\"data-ax5grid-inline-edit-picker\")) {\n                                return true;\n                            }\n                            return _target.getAttribute(\"data-ax5grid-container\") === \"root\";\n                        });\n\n                    if (target && target.getAttribute(\"data-ax5grid-instance\") === this.id) {\n                        self.focused = true;\n                    } else {\n                        self.focused = false;\n                        GRID.body.blur.call(this);\n                    }\n                }).bind(this));\n\n                jQuery(window).on(\"keydown.ax5grid-\" + this.instanceId, function (e) {\n                    if (self.focused) {\n                        if (self.isInlineEditing) {\n\n                            if (e.which == ax5.info.eventKeys.ESC) {\n                                self.keyDown(\"ESC\", e.originalEvent);\n                            }\n                            else if (e.which == ax5.info.eventKeys.RETURN) {\n                                self.keyDown(\"RETURN\", e.originalEvent);\n                            }\n                            else if (e.which == ax5.info.eventKeys.TAB) {\n                                self.keyDown(\"TAB\", e.originalEvent);\n                                U.stopEvent(e);\n                            }\n                            else if (e.which == ax5.info.eventKeys.UP) {\n                                self.keyDown(\"RETURN\", {shiftKey: true});\n                            }\n                            else if (e.which == ax5.info.eventKeys.DOWN) {\n                                self.keyDown(\"RETURN\", {});\n                            }\n\n                        }\n                        else {\n\n                            if (e.metaKey || e.ctrlKey) {\n                                if (e.which == 67) { // c\n                                    self.copySelect();\n                                }\n                            } else {\n                                if (ctrlKeys[e.which]) {\n                                    self.keyDown(ctrlKeys[e.which], e.originalEvent); // 키다운 이벤트 호출\n                                    U.stopEvent(e);\n                                } else if (e.which == ax5.info.eventKeys.ESC) {\n                                    if (self.focused) {\n                                        GRID.body.blur.call(self);\n                                    }\n                                } else if (e.which == ax5.info.eventKeys.RETURN) {\n                                    self.keyDown(\"RETURN\", e.originalEvent);\n                                } else if (e.which == ax5.info.eventKeys.TAB) {\n                                    //self.keyDown(\"RETURN\", e.originalEvent);\n                                    U.stopEvent(e);\n                                } else if (e.which != ax5.info.eventKeys.SPACE && Object.keys(self.focusedColumn).length) {\n                                    self.keyDown(\"INLINE_EDIT\", e.originalEvent);\n                                }\n                            }\n\n                        }\n                    }\n                });\n\n                // 그리드 레이아웃이 모든 준비를 마친시점에 onLoad존재 여부를 확인하고 호출하여 줍니다.\n                setTimeout((function () {\n                    if (this.onLoad) {\n                        this.onLoad.call({\n                            self: this\n                        })\n                    }\n                }).bind(this));\n                return this;\n            };\n\n            /**\n             * align grid size\n             * @method ax5grid.align\n             * @returns {ax5grid}\n             */\n            this.align = function () {\n                if (alignGrid.call(this)) {\n                    GRID.body.repaint.call(this);\n                    GRID.scroller.resize.call(this);\n                }\n                return this;\n            };\n\n            /**\n             * @method ax5grid.keyDown\n             * @param {String} _keyName\n             * @param {Event|Object} _data\n             * @return {ax5grid}\n             */\n            this.keyDown = (function () {\n                let processor = {\n                    \"KEY_UP\": function () {\n                        GRID.body.moveFocus.call(this, \"UP\");\n                    },\n                    \"KEY_DOWN\": function () {\n                        GRID.body.moveFocus.call(this, \"DOWN\");\n                    },\n                    \"KEY_LEFT\": function () {\n                        GRID.body.moveFocus.call(this, \"LEFT\");\n                    },\n                    \"KEY_RIGHT\": function () {\n                        GRID.body.moveFocus.call(this, \"RIGHT\");\n                    },\n                    \"KEY_HOME\": function () {\n                        GRID.body.moveFocus.call(this, \"HOME\");\n                    },\n                    \"KEY_END\": function () {\n                        GRID.body.moveFocus.call(this, \"END\");\n                    },\n                    \"INLINE_EDIT\": function (_e) {\n                        GRID.body.inlineEdit.active.call(this, this.focusedColumn, _e);\n                        if (!/[0-9a-zA-Z]/.test(_e.key)) {\n                            U.stopEvent(_e);\n                        }\n                    },\n                    \"ESC\": function (_e) {\n                        GRID.body.inlineEdit.keydown.call(this, \"ESC\");\n                    },\n                    \"RETURN\": function (_e) {\n                        var activeEditLength = 0;\n                        for (var columnKey in this.inlineEditing) {\n                            activeEditLength++;\n\n                            GRID.body.inlineEdit.keydown.call(this, \"RETURN\", columnKey);\n                            // next focus\n                            if (activeEditLength == 1) {\n                                if (GRID.body.moveFocus.call(this, (_e.shiftKey) ? \"UP\" : \"DOWN\")) {\n                                    GRID.body.inlineEdit.keydown.call(this, \"RETURN\");\n                                }\n                            }\n                        }\n                        if (activeEditLength == 0) {\n                            GRID.body.inlineEdit.keydown.call(this, \"RETURN\");\n                            U.stopEvent(_e);\n                        } else {\n\n                        }\n                    },\n                    \"TAB\": function (_e) {\n\n                        var activeEditLength = 0;\n                        for (var columnKey in this.inlineEditing) {\n                            activeEditLength++;\n\n                            GRID.body.inlineEdit.keydown.call(this, \"RETURN\", columnKey, {moveFocus: true});\n                            // next focus\n                            if (activeEditLength == 1) {\n                                if (GRID.body.moveFocus.call(this, (_e.shiftKey) ? \"LEFT\" : \"RIGHT\")) {\n                                    GRID.body.inlineEdit.keydown.call(this, \"RETURN\", undefined, {moveFocus: true});\n                                }\n                            }\n                        }\n                    }\n                };\n                return function (_act, _data) {\n                    if (_act in processor) processor[_act].call(this, _data);\n                    return this;\n                }\n            })();\n\n            /**\n             * @method ax5grid.copySelect\n             * @returns {Boolean} copysuccess\n             */\n            this.copySelect = function () {\n                let copysuccess,\n                    $clipBoard = this.$[\"form\"][\"clipboard\"],\n                    copyTextArray = [], copyText = \"\",\n                    _rowIndex, _colIndex, _dindex, _di = 0;\n\n                for (let c in this.selectedColumn) {\n                    let _column = this.selectedColumn[c];\n\n                    if (_column) {\n                        if (typeof _dindex === \"undefined\") {\n                            _dindex = _column.dindex;\n                            _rowIndex = _column.rowIndex;\n                            _colIndex = _column.rowIndex;\n                        }\n\n                        if (_dindex != _column.dindex || _rowIndex != _column.rowIndex) {\n                            _di++;\n                        }\n\n                        if (!copyTextArray[_di]) {\n                            copyTextArray[_di] = [];\n                        }\n                        let originalColumn = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex];\n                        if (originalColumn) {\n                            if (this.list[_column.dindex].__isGrouping) {\n                                copyTextArray[_di].push(this.list[_column.dindex][_column.colIndex]);\n                            } else {\n                                copyTextArray[_di].push(this.list[_column.dindex][originalColumn.key]);\n                            }\n                        } else {\n                            copyTextArray[_di].push(\"\");\n                        }\n\n                        _dindex = _column.dindex;\n                        _rowIndex = _column.rowIndex;\n                    }\n                }\n\n                copyTextArray.forEach(function (r) {\n                    copyText += r.join('\\t') + \"\\n\";\n                });\n\n                $clipBoard.get(0).innerText = copyText;\n                $clipBoard.select();\n\n                try {\n                    copysuccess = document.execCommand(\"copy\");\n                } catch (e) {\n                    copysuccess = false;\n                }\n                return copysuccess;\n            };\n\n            /**\n             * @method ax5grid.setData\n             * @param {Array} _data\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.setData({\n             *  list: [],\n             *  page: {\n             *      currentPage: 0,\n             *      pageSize: 50,\n             *      totalElements: 500,\n             *      totalPages: 100\n             *  }\n             * });\n             *\n             * // onlyList\n             * ax5Grid.setData([]);\n             * ```\n             */\n            this.setData = function (_data) {\n                GRID.data.set.call(this, _data);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this);\n                GRID.scroller.resize.call(this);\n                GRID.page.navigationUpdate.call(this);\n                GRID.body.scrollTo.call(this, {top: 0});\n                return this;\n            };\n\n            /**\n             * @method ax5grid.getList\n             * @param {String} _type\n             * @returns {Array}\n             * @example\n             * ```js\n             * ax5Grid.getList();\n             * ax5Grid.getList(\"modified\");\n             * ax5Grid.getList(\"deleted\");\n             * ```\n             */\n            this.getList = function (_type) {\n                return GRID.data.getList.call(this, _type);\n            };\n\n            /**\n             * @method ax5grid.setHeight\n             * @param {Number} _height\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.setHeight(height);\n             * ```\n             */\n            this.setHeight = function (_height) {\n                //console.log(this.$target);\n                if (_height == \"100%\") {\n                    _height = this.$target.offsetParent().innerHeight();\n                }\n                this.$target.css({height: _height});\n                this.$[\"container\"][\"root\"].css({height: _height});\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.addRow\n             * @param {Object} _row\n             * @param {Number|String} [_dindex=last]\n             * @param {Object} [_options] - options of addRow\n             * @param {Boolean} [_options.sort] - sortData\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.addRow($.extend({}, {...}), \"first\");\n             * ```\n             */\n            this.addRow = function (_row, _dindex, _options) {\n                GRID.data.add.call(this, _row, _dindex, _options);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.appendToList\n             * @param _list\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.appendToList([{},{},{}]);\n             * ax5Grid.appendToList([{},{},{}]);\n             * ```\n             */\n            this.appendToList = function (_list) {\n                GRID.data.append.call(this, _list, (function () {\n                    alignGrid.call(this);\n                    GRID.body.repaint.call(this);\n                    GRID.scroller.resize.call(this);\n                }).bind(this));\n                return this;\n            };\n\n            /**\n             * @method ax5grid.removeRow\n             * @param {Number|String} [_dindex=last]\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.removeRow();\n             * ax5Grid.removeRow(\"first\");\n             * ax5Grid.removeRow(\"last\");\n             * ax5Grid.removeRow(1);\n             * ```\n             */\n            this.removeRow = function (_dindex) {\n                GRID.data.remove.call(this, _dindex);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.updateRow\n             * @param {Object} _row\n             * @param {Number} _dindex\n             * @returns {ax5grid}\n             */\n            this.updateRow = function (_row, _dindex) {\n                GRID.data.update.call(this, _row, _dindex);\n                // todo : mergeCells 옵션에 따라 예외처리\n\n                GRID.body.repaintRow.call(this, _dindex);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.deleteRow\n             * @param {Number|String} _dindex\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.deleteRow(\"first\");\n             * ax5Grid.deleteRow(\"last\");\n             * ax5Grid.deleteRow(1);\n             * ax5Grid.deleteRow(\"selected\");\n             * ```\n             */\n            this.deleteRow = function (_dindex) {\n                GRID.data.deleteRow.call(this, _dindex);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                // 삭제시엔 포커스 ?\n                // GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.setValue\n             * @param _dindex\n             * @param _key\n             * @param _value\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.setValue(0, \"price\", 100);\n             * ```\n             */\n            this.setValue = function (_dindex, _key, _value) {\n                // getPanelname;\n                if (GRID.data.setValue.call(this, _dindex, _key, _value)) {\n                    let repaintCell = function (_panelName, _rows, __dindex, __key, __value) {\n                        for (let r = 0, rl = _rows.length; r < rl; r++) {\n                            for (let c = 0, cl = _rows[r].cols.length; c < cl; c++) {\n                                if (_rows[r].cols[c].key == __key) {\n                                    if (this.xvar.frozenRowIndex > __dindex) {\n                                        GRID.body.repaintCell.call(this, \"top-\" + _panelName, __dindex, r, c, __value);\n                                    } else {\n                                        GRID.body.repaintCell.call(this, _panelName + \"-scroll\", __dindex, r, c, __value);\n                                    }\n                                }\n                            }\n                        }\n                    };\n\n                    repaintCell.call(this, \"left-body\", this.leftBodyRowData.rows, _dindex, _key, _value);\n                    repaintCell.call(this, \"body\", this.bodyRowData.rows, _dindex, _key, _value);\n\n                }\n\n                return this;\n            };\n\n            /**\n             * @method ax5grid.addColumn\n             * @param {Object} _column\n             * @param {Number|String} [_cindex=last]\n             * @returns {ax5grid}\n             */\n            this.addColumn = (function () {\n                let processor = {\n                    \"first\": function (_column) {\n                        this.config.columns = [].concat(_column).concat(this.config.columns);\n                    },\n                    \"last\": function (_column) {\n                        this.config.columns = this.config.columns.concat([].concat(_column));\n                    }\n                };\n\n                return function (_column, _cindex) {\n                    if (typeof _column === \"undefined\") throw '_column must not be null';\n                    if (typeof _cindex === \"undefined\") _cindex = \"last\";\n                    if (_cindex in processor) {\n                        processor[_cindex].call(this, _column);\n                    } else {\n                        if (!U.isNumber(_cindex)) {\n                            throw 'invalid argument _cindex';\n                        }\n                        this.config.columns.splice(_cindex, [].concat(_column))\n                    }\n                    onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                    return this;\n                }\n            })();\n\n            /**\n             * @method ax5grid.removeCloumn\n             * @param {Number|String} [_cindex=last]\n             * @returns {ax5grid}\n             */\n            this.removeColumn = (function () {\n                let processor = {\n                    \"first\": function (_cindex) {\n                        this.config.columns.splice(_cindex, 1);\n                    },\n                    \"last\": function () {\n                        this.config.columns.splice(this.config.columns.length - 1, 1);\n                    }\n                };\n                return function (_cindex) {\n                    if (typeof _cindex === \"undefined\") _cindex = \"last\";\n                    if (_cindex in processor) {\n                        processor[_cindex].call(this, _cindex);\n                    } else {\n                        if (!U.isNumber(_cindex)) {\n                            throw 'invalid argument _cindex';\n                        }\n                        //\n                        this.config.columns.splice(_cindex, 1);\n                    }\n                    onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                    return this;\n                }\n            })();\n\n            /**\n             * @method ax5grid.updateColumn\n             * @param {Object} _column\n             * @param {Number} _cindex\n             * @returns {ax5grid}\n             */\n            this.updateColumn = function (_column, _cindex) {\n                if (!U.isNumber(_cindex)) {\n                    throw 'invalid argument _cindex';\n                }\n                //\n                this.config.columns.splice(_cindex, 1, _column);\n                onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                return this;\n            };\n\n            /**\n             * @method ax5grid.setColumnWidth\n             * @param {Number} _width\n             * @param {Number} _cindex\n             * @returns {ax5grid}\n             */\n            this.setColumnWidth = function (_width, _cindex) {\n                this.colGroup[this.xvar.columnResizerIndex]._width = _width;\n                this.needToPaintSum = true;\n\n                // 컬럼너비 변경사항 적용.\n                GRID.header.repaint.call(this);\n                GRID.body.repaint.call(this, true);\n                GRID.scroller.resize.call(this);\n\n                alignGrid.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.getColumnSortInfo\n             * @returns {Object} sortInfo\n             */\n            this.getColumnSortInfo = function () {\n                let that = {sortInfo: []};\n                for (let k in this.sortInfo) {\n                    that.sortInfo.push({\n                        key: k,\n                        orderBy: this.sortInfo[k].orderBy,\n                        seq: this.sortInfo[k].seq\n                    });\n                }\n                that.sortInfo.sort(function (a, b) {\n                    return a.seq > b.seq;\n                });\n                return that.sortInfo;\n            };\n\n            /**\n             * @method ax5grid.setColumnSort\n             * @param {Object} _sortInfo\n             * @param {Object} _sortInfo.key\n             * @param {Number} _sortInfo.key.seq - seq of sortOrder\n             * @param {String} _sortInfo.key.orderBy - \"desc\"|\"asc\"\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5grid.setColumnSort({a:{seq:0, orderBy:\"desc\"}, b:{seq:1, orderBy:\"asc\"}});\n             * ```\n             */\n            this.setColumnSort = function (_sortInfo) {\n                if (typeof _sortInfo !== \"undefined\") {\n                    this.sortInfo = _sortInfo;\n                    GRID.header.applySortStatus.call(this, _sortInfo);\n                }\n\n                sortColumns.call(this, _sortInfo || this.sortInfo);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.select\n             * @param {Number|Object} _selectObject\n             * @param {Number} _selectObject.index - index of row\n             * @param {Number} _selectObject.rowIndex - rowIndex of columns\n             * @param {Number} _selectObject.conIndex - colIndex of columns\n             * @param {Object} _options\n             * @param {Boolean} _options.selectedClear\n             * @param {Boolean} _options.selected\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.select(0);\n             * firstGrid.select(0, {selected: true});\n             * firstGrid.select(0, {selected: false});\n             * firstGrid.select(0, {selectedClear: true});\n             * ```\n             */\n            this.select = function (_selectObject, _options) {\n                if (U.isNumber(_selectObject)) {\n                    let dindex = _selectObject;\n\n                    if (!this.config.multipleSelect) {\n                        this.clearSelect();\n                    } else {\n                        if (_options && _options.selectedClear) {\n                            this.clearSelect();\n                        }\n                    }\n\n                    GRID.data.select.call(this, dindex, _options && _options.selected);\n                    GRID.body.updateRowState.call(this, [\"selected\"], dindex);\n                }\n                return this;\n            };\n\n            /**\n             * @method ax5grid.clearSelect\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.clearSelect();\n             * ```\n             */\n            this.clearSelect = function () {\n                GRID.body.updateRowState.call(this, [\"selectedClear\"]);\n                GRID.data.clearSelect.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.selectAll\n             * @param {Object} _options\n             * @param {Boolean} _options.selected\n             * @param {Function} _options.filter\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.selectAll();\n             * firstGrid.selectAll({selected: true});\n             * firstGrid.selectAll({selected: false});\n             * firstGrid.selectAll({filter: function(){\n             *      return this[\"b\"] == \"A01\";\n             * });\n             * firstGrid.selectAll({selected: true, filter: function(){\n             *      return this[\"b\"] == \"A01\";\n             * });\n             * ```\n             */\n            this.selectAll = function (_options) {\n                GRID.data.selectAll.call(this, _options && _options.selected, _options);\n                GRID.body.updateRowStateAll.call(this, [\"selected\"]);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.exportExcel\n             * @param {String} _fileName\n             * @returns {ax5grid|String}\n             * @example\n             * ```js\n             * firstGrid.exportExcel(\"grid-to-excel.xls\");\n             * console.log(firstGrid.exportExcel());\n             * ```\n             */\n            this.exportExcel = function (_fileName) {\n                let table = [];\n                table.push('<table border=\"1\">');\n                table.push(GRID.header.getExcelString.call(this));\n                table.push(GRID.body.getExcelString.call(this));\n                table.push('</table>');\n\n                if (typeof _fileName === \"undefined\") {\n                    return table.join('');\n                }\n                else {\n                    GRID.excel.export.call(this, [table.join('')], _fileName);\n                }\n\n                return this;\n            };\n\n            /**\n             * @method ax5grid.focus\n             * @param {String|Number} _pos - UP, DOWN, LEFT, RIGHT, HOME, END\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.focus(\"UP\");\n             * firstGrid.focus(\"DOWN\");\n             * firstGrid.focus(\"HOME\");\n             * firstGrid.focus(\"END\");\n             * ```\n             */\n            this.focus = function (_pos) {\n                if (GRID.body.moveFocus.call(this, _pos)) {\n                    let focusedColumn;\n                    for (let c in this.focusedColumn) {\n                        focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                        break;\n                    }\n                    if (focusedColumn) {\n                        this.select(focusedColumn.dindex, {selectedClear: true});\n                    }\n                }\n                else {\n                    if (typeof this.selectedDataIndexs[0] === \"undefined\") {\n                        this.select(0);\n                    } else {\n                        let selectedIndex = this.selectedDataIndexs[0];\n                        let processor = {\n                            \"UP\": function () {\n                                if (selectedIndex > 0) {\n                                    this.select(selectedIndex - 1, {selectedClear: true});\n                                    GRID.body.moveFocus.call(this, selectedIndex - 1);\n                                }\n                            },\n                            \"DOWN\": function () {\n                                if (selectedIndex < this.list.length - 1) {\n                                    this.select(selectedIndex + 1, {selectedClear: true});\n                                    GRID.body.moveFocus.call(this, selectedIndex + 1);\n                                }\n                            },\n                            \"HOME\": function () {\n                                this.select(0, {selectedClear: true});\n                                GRID.body.moveFocus.call(this, 0);\n                            },\n                            \"END\": function () {\n                                this.select(this.list.length - 1, {selectedClear: true});\n                                GRID.body.moveFocus.call(this, this.list.length - 1);\n                            }\n                        };\n\n                        if (_pos in processor) {\n                            processor[_pos].call(this);\n                        }\n                    }\n                }\n                return this;\n            };\n\n            /**\n             * @method ax5grid.destroy\n             * @returns {null}\n             */\n            this.destroy = function () {\n                const instanceId = this.instanceId;\n                this.$target.empty();\n                this.list = [];\n                UI.grid_instance = ax5.util.filter(UI.grid_instance, function () {\n                    return this.instanceId != instanceId;\n                });\n                return null;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                UI.grid_instance = UI.grid_instance || [];\n                UI.grid_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n        };\n        return ax5grid;\n    })());\n\n    GRID = ax5.ui.grid;\n})();\n\n// todo : body menu\n// todo : filter\n// todo : column reorder\n// todo : editor 필수값 속성 지정","// ax5.ui.grid.body\n(function () {\n\n    let GRID = ax5.ui.grid,\n        U = ax5.util;\n\n    let columnSelect = {\n        focusClear: function () {\n            let self = this, _column;\n            for (let c in self.focusedColumn) {\n                _column = self.focusedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]')\n                        .removeAttr('data-ax5grid-column-focused');\n                }\n            }\n            self.focusedColumn = {};\n        },\n        clear: function () {\n            let self = this, _column;\n            for (let c in self.selectedColumn) {\n                _column = self.selectedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]')\n                        .removeAttr('data-ax5grid-column-selected');\n                }\n            }\n            self.selectedColumn = {};\n        },\n        init: function (column) {\n            let self = this;\n            if (this.isInlineEditing) {\n                for (let editKey in this.inlineEditing) {\n                    if (editKey == column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex) {\n                        return this;\n                    }\n                }\n            }\n\n            // focus\n            columnSelect.focusClear.call(self);\n            self.focusedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = {\n                panelName: column.panelName,\n                dindex: column.dindex,\n                rowIndex: column.rowIndex,\n                colIndex: column.colIndex,\n                colspan: column.colspan\n            };\n\n            // select\n            columnSelect.clear.call(self);\n            self.xvar.selectedRange = {\n                start: [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1],\n                end: null\n            };\n            self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = (function (data) {\n                if (data) {\n                    return false;\n                } else {\n                    return {\n                        panelName: column.panelName,\n                        dindex: column.dindex,\n                        rowIndex: column.rowIndex,\n                        colIndex: column.colIndex,\n                        colspan: column.colspan\n                    }\n                }\n            })(self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex]);\n\n            this.$.panel[column.panelName]\n                .find('[data-ax5grid-tr-data-index=\"' + column.dindex + '\"]')\n                .find('[data-ax5grid-column-rowindex=\"' + column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + column.colIndex + '\"]')\n                .attr('data-ax5grid-column-focused', \"true\")\n                .attr('data-ax5grid-column-selected', \"true\");\n\n            if (this.isInlineEditing) {\n                GRID.body.inlineEdit.deActive.call(this, \"RETURN\");\n            }\n        },\n        update: function (column) {\n            var self = this;\n            var dindex, colIndex, rowIndex, trl;\n\n            self.xvar.selectedRange[\"end\"] = [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1];\n            columnSelect.clear.call(self);\n\n            var range = {\n                r: {\n                    s: Math.min(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0]),\n                    e: Math.max(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0])\n                },\n                c: {\n                    s: Math.min(self.xvar.selectedRange[\"start\"][2], self.xvar.selectedRange[\"end\"][2]),\n                    e: Math.max(self.xvar.selectedRange[\"start\"][2] + self.xvar.selectedRange[\"start\"][3], self.xvar.selectedRange[\"end\"][2] + self.xvar.selectedRange[\"end\"][3])\n                }\n            };\n\n            dindex = range.r.s;\n            for (; dindex <= range.r.e; dindex++) {\n\n\n                trl = this.bodyRowTable.rows.length;\n                rowIndex = 0;\n                for (; rowIndex < trl; rowIndex++) {\n                    colIndex = range.c.s;\n                    for (; colIndex <= range.c.e; colIndex++) {\n                        var _panels = [],\n                            panelName = \"\";\n\n                        if (self.xvar.frozenRowIndex > dindex) _panels.push(\"top\");\n                        if (self.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                        _panels.push(\"body\");\n                        if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                        panelName = _panels.join(\"-\");\n\n                        self.selectedColumn[dindex + \"_\" + colIndex + \"_\" + rowIndex] = {\n                            panelName: panelName,\n                            dindex: dindex,\n                            rowIndex: rowIndex,\n                            colIndex: colIndex,\n                            colspan: column.colspan\n                        };\n\n                        _panels = null;\n                        panelName = null;\n                    }\n                }\n            }\n            dindex = null;\n            colIndex = null;\n            rowIndex = null;\n\n            for (var c in self.selectedColumn) {\n                var _column = self.selectedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]')\n                        .attr('data-ax5grid-column-selected', 'true');\n                }\n            }\n\n        }\n    };\n\n    let columnSelector = {\n        \"on\": function (cell) {\n            let self = this;\n\n            if (this.inlineEditing[cell.dindex + \"_\" + cell.colIndex + \"_\" + cell.rowIndex]) {\n                return;\n            }\n\n            columnSelect.init.call(self, cell);\n\n            this.$[\"container\"][\"body\"]\n                .on(\"mousemove.ax5grid-\" + this.instanceId, '[data-ax5grid-column-attr=\"default\"]', function (e) {\n                    if (this.getAttribute(\"data-ax5grid-column-rowIndex\")) {\n                        columnSelect.update.call(self, {\n                            panelName: this.getAttribute(\"data-ax5grid-panel-name\"),\n                            dindex: Number(this.getAttribute(\"data-ax5grid-data-index\")),\n                            rowIndex: Number(this.getAttribute(\"data-ax5grid-column-rowIndex\")),\n                            colIndex: Number(this.getAttribute(\"data-ax5grid-column-colIndex\")),\n                            colspan: Number(this.getAttribute(\"colspan\"))\n                        });\n                        U.stopEvent(e);\n                    }\n                })\n                .on(\"mouseup.ax5grid-\" + this.instanceId, function () {\n                    columnSelector.off.call(self);\n                })\n                .on(\"mouseleave.ax5grid-\" + this.instanceId, function () {\n                    columnSelector.off.call(self);\n                });\n\n            jQuery(document.body)\n                .attr('unselectable', 'on')\n                .css('user-select', 'none')\n                .on('selectstart', false);\n        },\n        \"off\": function () {\n\n            this.$[\"container\"][\"body\"]\n                .off(\"mousemove.ax5grid-\" + this.instanceId)\n                .off(\"mouseup.ax5grid-\" + this.instanceId)\n                .off(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body)\n                .removeAttr('unselectable')\n                .css('user-select', 'auto')\n                .off('selectstart');\n        }\n    };\n\n    let updateRowState = function (_states, _dindex, _data) {\n        let self = this,\n            cfg = this.config,\n            processor = {\n                \"selected\": function (_dindex) {\n                    if (this.list[_dindex]) {\n                        var i = this.$.livePanelKeys.length;\n                        while (i--) {\n                            this.$.panel[this.$.livePanelKeys[i]]\n                                .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\n                                .attr(\"data-ax5grid-selected\", this.list[_dindex][cfg.columnKeys.selected]);\n\n                        }\n                    }\n                },\n                \"selectedClear\": function () {\n                    var si = this.selectedDataIndexs.length;\n                    while (si--) {\n                        var dindex = this.selectedDataIndexs[si];\n                        var i = this.$.livePanelKeys.length;\n                        while (i--) {\n                            this.$.panel[this.$.livePanelKeys[i]]\n                                .find('[data-ax5grid-tr-data-index=\"' + dindex + '\"]')\n                                .attr(\"data-ax5grid-selected\", false);\n                            this.list[dindex][cfg.columnKeys.selected] = false;\n                        }\n                    }\n                },\n                \"cellChecked\": function (_dindex, _data) {\n                    var key = _data.key;\n                    var rowIndex = _data.rowIndex;\n                    var colIndex = _data.colIndex;\n\n                    var panelName = (function () {\n                        var _panels = [];\n                        if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n                        if (this.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                        _panels.push(\"body\");\n                        if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                        return _panels.join(\"-\");\n                    }).call(this);\n\n                    this.$.panel[panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\n                        .find('[data-ax5grid-column-rowIndex=\"' + rowIndex + '\"][data-ax5grid-column-colIndex=\"' + colIndex + '\"]')\n                        .find('[data-ax5grid-editor=\"checkbox\"]')\n                        .attr(\"data-ax5grid-checked\", '' + _data.checked);\n                }\n            };\n\n        _states.forEach(function (_state) {\n            if (!processor[_state]) throw 'invaild state name';\n            processor[_state].call(self, _dindex, _data);\n        });\n    };\n\n    let updateRowStateAll = function (_states, _data) {\n        let self = this,\n            cfg = this.config,\n            processor = {\n                \"selected\": function (_dindex) {\n                    GRID.body.repaint.call(this, true);\n                }\n            };\n\n        _states.forEach(function (_state) {\n            if (!processor[_state]) throw 'invaild state name';\n            processor[_state].call(self, _data);\n        });\n    };\n\n    let init = function () {\n        let self = this;\n\n        this.$[\"container\"][\"body\"].on(\"click\", '[data-ax5grid-column-attr]', function (e) {\n            let panelName, attr,\n                row, col, dindex, rowIndex, colIndex, disableSelection,\n                targetClick = {\n                    \"default\": function (_column) {\n                        let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                            that = {\n                                self: self,\n                                page: self.page,\n                                list: self.list,\n                                item: self.list[_column.dindex],\n                                dindex: _column.dindex,\n                                rowIndex: _column.rowIndex,\n                                colIndex: _column.colIndex,\n                                column: column,\n                                value: self.list[_column.dindex][column.key]\n                            };\n\n                        if (column.editor && column.editor.type == \"checkbox\") { // todo : GRID.inlineEditor에서 처리 할수 있도록 구문 변경 필요.\n                            let value = GRID.data.getValue.call(self, _column.dindex, column.key),\n                                checked, newValue;\n\n                            if (column.editor.config && column.editor.config.trueValue) {\n                                if (checked = !(value == column.editor.config.trueValue)) {\n                                    newValue = column.editor.config.trueValue;\n                                } else {\n                                    newValue = column.editor.config.falseValue;\n                                }\n                            } else {\n                                newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                            }\n\n                            GRID.data.setValue.call(self, _column.dindex, column.key, newValue);\n\n                            updateRowState.call(self, [\"cellChecked\"], _column.dindex, {\n                                key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                                editorConfig: column.editor.config, checked: checked\n                            });\n                        } else {\n                            if (self.config.body.onClick) {\n                                self.config.body.onClick.call(that);\n                            }\n                        }\n                    },\n                    \"rowSelector\": function (_column) {\n                        if (self.list[_column.dindex][self.config.columnKeys.disableSelection]) {\n                            return false;\n                        }\n\n                        if (!self.config.multipleSelect && self.selectedDataIndexs[0] !== _column.dindex) {\n                            GRID.body.updateRowState.call(self, [\"selectedClear\"]);\n                            GRID.data.clearSelect.call(self);\n                        }\n\n                        GRID.data.select.call(self, _column.dindex, undefined, {\n                            internalCall: true\n                        });\n                        updateRowState.call(self, [\"selected\"], _column.dindex);\n                    },\n                    \"lineNumber\": function (_column) {\n\n                    }\n                };\n\n            panelName = this.getAttribute(\"data-ax5grid-panel-name\");\n            attr = this.getAttribute(\"data-ax5grid-column-attr\");\n            row = Number(this.getAttribute(\"data-ax5grid-column-row\"));\n            col = Number(this.getAttribute(\"data-ax5grid-column-col\"));\n            rowIndex = Number(this.getAttribute(\"data-ax5grid-column-rowIndex\"));\n            colIndex = Number(this.getAttribute(\"data-ax5grid-column-colIndex\"));\n            dindex = Number(this.getAttribute(\"data-ax5grid-data-index\"));\n\n            if (attr in targetClick) {\n                targetClick[attr]({\n                    panelName: panelName,\n                    attr: attr,\n                    row: row,\n                    col: col,\n                    dindex: dindex,\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                });\n            }\n        });\n        this.$[\"container\"][\"body\"].on(\"dblclick\", '[data-ax5grid-column-attr]', function (e) {\n            let panelName, attr,\n                row, col, dindex, rowIndex, colIndex,\n                targetDBLClick = {\n                    \"default\": function (_column) {\n                        if (self.isInlineEditing) {\n                            for (let columnKey in self.inlineEditing) {\n                                if (columnKey == _column.dindex + \"_\" + _column.colIndex + \"_\" + _column.rowIndex) {\n                                    return this;\n                                }\n                            }\n                        }\n\n                        let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex], value = \"\";\n                        if (column) {\n                            if (!self.list[dindex].__isGrouping) {\n                                value = GRID.data.getValue.call(self, dindex, column.key);\n                            }\n                        }\n\n                        let editor = self.colGroup[_column.colIndex].editor;\n                        if (U.isObject(editor)) {\n                            GRID.body.inlineEdit.active.call(self, self.focusedColumn, e, value);\n                        } else {\n                            // 더블클릭 실행\n                            if (self.config.body.onDBLClick) {\n                                let that = {\n                                    self: self,\n                                    page: self.page,\n                                    list: self.list,\n                                    item: self.list[_column.dindex],\n                                    dindex: _column.dindex,\n                                    rowIndex: _column.rowIndex,\n                                    colIndex: _column.colIndex,\n                                    column: column,\n                                    value: self.list[_column.dindex][column.key]\n                                };\n                                self.config.body.onDBLClick.call(that);\n                            }\n                        }\n                    },\n                    \"rowSelector\": function (_column) {\n\n                    },\n                    \"lineNumber\": function (_column) {\n\n                    }\n                };\n\n            panelName = this.getAttribute(\"data-ax5grid-panel-name\");\n            attr = this.getAttribute(\"data-ax5grid-column-attr\");\n            row = Number(this.getAttribute(\"data-ax5grid-column-row\"));\n            col = Number(this.getAttribute(\"data-ax5grid-column-col\"));\n            rowIndex = Number(this.getAttribute(\"data-ax5grid-column-rowIndex\"));\n            colIndex = Number(this.getAttribute(\"data-ax5grid-column-colIndex\"));\n            dindex = Number(this.getAttribute(\"data-ax5grid-data-index\"));\n\n            if (attr in targetDBLClick) {\n                targetDBLClick[attr]({\n                    panelName: panelName,\n                    attr: attr,\n                    row: row,\n                    col: col,\n                    dindex: dindex,\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                });\n            }\n        });\n\n        /* 사용안함. 나중을 위해 그냥 두자\n         this.$[\"container\"][\"body\"].on(\"mouseover\", \"tr\", function () {\n         let dindex = this.getAttribute(\"data-ax5grid-tr-data-index\"),\n         i = self.$.livePanelKeys.length;\n         while (i--) {\n         if (typeof self.xvar.dataHoveredIndex !== \"undefined\") self.$.panel[self.$.livePanelKeys[i]].find('[data-ax5grid-tr-data-index=\"' + self.xvar.dataHoveredIndex + '\"]').removeClass(\"hover\");\n         self.$.panel[self.$.livePanelKeys[i]].find('[data-ax5grid-tr-data-index=\"' + dindex + '\"]').addClass(\"hover\");\n         }\n         self.xvar.dataHoveredIndex = dindex;\n         });\n         */\n        this.$[\"container\"][\"body\"]\n            .on(\"mousedown\", '[data-ax5grid-column-attr=\"default\"]', function (e) {\n                if (self.xvar.touchmoved) return false;\n                if (this.getAttribute(\"data-ax5grid-column-rowIndex\")) {\n                    columnSelector.on.call(self, {\n                        panelName: this.getAttribute(\"data-ax5grid-panel-name\"),\n                        dindex: Number(this.getAttribute(\"data-ax5grid-data-index\")),\n                        rowIndex: Number(this.getAttribute(\"data-ax5grid-column-rowIndex\")),\n                        colIndex: Number(this.getAttribute(\"data-ax5grid-column-colIndex\")),\n                        colspan: Number(this.getAttribute(\"colspan\"))\n                    });\n                }\n            })\n            .on(\"dragstart\", function (e) {\n                U.stopEvent(e);\n                return false;\n            });\n\n        resetFrozenColumn.call(this);\n    };\n\n    let resetFrozenColumn = function () {\n        let cfg = this.config,\n            dividedBodyRowObj = GRID.util.divideTableByFrozenColumnIndex(this.bodyRowTable, this.xvar.frozenColumnIndex);\n\n\n        this.asideBodyRowData = (function (dataTable) {\n            let data = {rows: []};\n            for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n                data.rows[i] = {cols: []};\n                if (i === 0) {\n                    let col = {\n                        label: \"\",\n                        colspan: 1,\n                        rowspan: dataTable.rows.length,\n                        colIndex: null\n                    }, _col = {};\n\n                    if (cfg.showLineNumber) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.lineNumberColumnWidth,\n                            _width: cfg.lineNumberColumnWidth,\n                            columnAttr: \"lineNumber\",\n                            label: \"&nbsp;\", key: \"__d-index__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                    if (cfg.showRowSelector) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.rowSelectorColumnWidth,\n                            _width: cfg.rowSelectorColumnWidth,\n                            columnAttr: \"rowSelector\",\n                            label: \"\", key: \"__d-checkbox__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                }\n            }\n\n            return data;\n        }).call(this, this.bodyRowTable);\n        this.leftBodyRowData = dividedBodyRowObj.leftData;\n        this.bodyRowData = dividedBodyRowObj.rightData;\n\n        if (cfg.body.grouping) {\n            let dividedBodyGroupingObj = GRID.util.divideTableByFrozenColumnIndex(this.bodyGroupingTable, this.xvar.frozenColumnIndex);\n            this.asideBodyGroupingData = (function (dataTable) {\n                let data = {rows: []};\n                for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n                    data.rows[i] = {cols: []};\n                    if (i === 0) {\n                        let col = {\n                            label: \"\",\n                            colspan: 1,\n                            rowspan: dataTable.rows.length,\n                            colIndex: null\n                        }, _col = {};\n\n                        if (cfg.showLineNumber) {\n                            _col = jQuery.extend({}, col, {\n                                width: cfg.lineNumberColumnWidth,\n                                _width: cfg.lineNumberColumnWidth,\n                                columnAttr: \"lineNumber\",\n                                label: \"&nbsp;\", key: \"__d-index__\"\n                            });\n                            data.rows[i].cols.push(_col);\n                        }\n                        if (cfg.showRowSelector) {\n                            _col = jQuery.extend({}, col, {\n                                width: cfg.rowSelectorColumnWidth,\n                                _width: cfg.rowSelectorColumnWidth,\n                                columnAttr: \"rowSelector\",\n                                label: \"\", key: \"__d-checkbox__\"\n                            });\n                            data.rows[i].cols.push(_col);\n                        }\n                    }\n                }\n\n                return data;\n            }).call(this, this.bodyGroupingTable);\n            this.leftBodyGroupingData = dividedBodyGroupingObj.leftData;\n            this.bodyGroupingData = dividedBodyGroupingObj.rightData;\n            this.bodyGroupingMap = GRID.util.makeBodyRowMap.call(this, this.bodyGroupingTable);\n        }\n\n        this.leftFootSumData = {};\n        this.footSumData = {};\n        if (this.config.footSum) {\n            let dividedFootSumObj = GRID.util.divideTableByFrozenColumnIndex(this.footSumTable, this.xvar.frozenColumnIndex);\n            this.leftFootSumData = dividedFootSumObj.leftData;\n            this.footSumData = dividedFootSumObj.rightData;\n        }\n    };\n\n    let getFieldValue = function (_list, _item, _index, _col, _value, _returnPlainText) {\n        let _key = _col.key, tagsToReplace = {\n            '<': '&lt;',\n            '>': '&gt;'\n        };\n\n        if (_key === \"__d-index__\") {\n            return (typeof _item[\"__index\"] !== \"undefined\") ? _item[\"__index\"] + 1 : \"\";\n        }\n        else if (_key === \"__d-checkbox__\") {\n            return `<div class=\"checkBox\" style=\"max-height: ${_col.width - 10}px;min-height: ${_col.width - 10}px;\"></div>`;\n        }\n        else {\n            if (_col.editor && (function (_editor) {\n                    if (_editor.type in GRID.inlineEditor) {\n                        return (GRID.inlineEditor[_editor.type].editMode == \"inline\");\n                    }\n                    return false;\n                })(_col.editor)) {\n\n                _value = _value || GRID.data.getValue.call(this, _index, _key);\n\n                if (U.isFunction(_col.editor.disabled)) {\n                    if (_col.editor.disabled.call({\n                            list: _list,\n                            dindex: _index,\n                            item: _list[_index],\n                            key: _key,\n                            value: _value\n                        })) {\n                        return _value;\n                    }\n                }\n\n                // print editor\n                return _returnPlainText ? _value : GRID.inlineEditor[_col.editor.type].getHtml(this, _col.editor, _value);\n            }\n            if (_col.formatter) {\n                let that = {\n                    key: _key,\n                    value: _value || GRID.data.getValue.call(this, _index, _key),\n                    dindex: _index,\n                    item: _item,\n                    list: _list\n                };\n                if (U.isFunction(_col.formatter)) {\n                    return _col.formatter.call(that);\n                } else {\n                    return GRID.formatter[_col.formatter].call(that);\n                }\n            }\n            else {\n                let returnValue = \"\";\n\n                if (typeof _value !== \"undefined\") {\n                    returnValue = _value;\n                } else {\n                    _value = GRID.data.getValue.call(this, _index, _key);\n                    if (_value !== null && typeof _value !== \"undefined\") returnValue = _value;\n                }\n\n                // 키값이 Boolean일때 오류 발생하여 수정.\n                return (typeof returnValue !== \"string\") ? returnValue : returnValue.replace(/[<>]/g, function (tag) {\n                        return tagsToReplace[tag] || tag;\n                    });\n            }\n        }\n\n    };\n\n    let getGroupingValue = function (_item, _index, _col) {\n        let value, that, _key = _col.key, _label = _col.label;\n\n        if (typeof _key === \"undefined\") {\n            that = {\n                key: _key,\n                list: _item.__groupingList,\n                groupBy: _item.__groupingBy\n            };\n            if (U.isFunction(_label)) {\n                value = _label.call(that);\n            } else {\n                value = _label;\n            }\n            _item[_col.colIndex] = value;\n            return value;\n        }\n        else if (_key === \"__d-index__\") {\n            return '';\n        }\n        else if (_key === \"__d-checkbox__\") {\n            return '';\n        }\n        else {\n            if (_col.collector) {\n                that = {\n                    key: _key,\n                    list: _item.__groupingList\n                };\n                if (U.isFunction(_col.collector)) {\n                    value = _col.collector.call(that);\n                } else {\n                    value = GRID.collector[_col.collector].call(that);\n                }\n                _item[_col.colIndex] = value;\n\n                if (_col.formatter) {\n                    that.value = value;\n                    if (U.isFunction(_col.formatter)) {\n                        return _col.formatter.call(that);\n                    } else {\n                        return GRID.formatter[_col.formatter].call(that);\n                    }\n                } else {\n                    return value;\n                }\n            } else {\n                return \"&nbsp;\";\n            }\n        }\n    };\n\n    let getSumFieldValue = function (_list, _col) {\n        let _key = _col.key, _label = _col.label;\n        //, _collector, _formatter\n        if (typeof _key === \"undefined\") {\n            return _label;\n        }\n        else if (_key === \"__d-index__\" || _key === \"__d-checkbox__\") {\n            return '&nbsp;';\n        }\n        else {\n            if (_col.collector) {\n                let that = {\n                        key: _key,\n                        list: _list\n                    },\n                    value;\n\n                if (U.isFunction(_col.collector)) {\n                    value = _col.collector.call(that);\n                } else {\n                    value = GRID.collector[_col.collector].call(that);\n                }\n\n                if (_col.formatter) {\n                    that.value = value;\n                    if (U.isFunction(_col.formatter)) {\n                        return _col.formatter.call(that);\n                    } else {\n                        return GRID.formatter[_col.formatter].call(that);\n                    }\n                } else {\n                    return value;\n                }\n\n            } else {\n                return \"&nbsp;\";\n            }\n        }\n    };\n\n    let repaint = function (_reset) {\n        let cfg = this.config,\n            list = this.list;\n\n        /// repaint reset 타입이면 고정컬럼을 재조정\n        if (_reset) {\n            resetFrozenColumn.call(this);\n            // 틀고정 이 변경되면 출력 시작 인덱스 값을 초기화\n            this.xvar.paintStartRowIndex = undefined;\n            this.xvar.paintStartColumnIndex = undefined;\n        }\n\n        /// 출력시작 인덱스\n        let paintStartRowIndex = Math.floor(-(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex;\n        if (isNaN(paintStartRowIndex)) return this;\n\n        let paintStartColumnIndex = 0, paintEndColumnIndex = 0, nopaintLeftColumnsWidth = null, nopaintRightColumnsWidth = null;\n\n        let bodyScrollLeft = -(this.$.panel[\"body-scroll\"].position().left);\n\n        if (this.config.virtualScrollX) { // 페인트 시작컬럼위치와 종료컬럼위치 구하기\n            for (let ci = this.xvar.frozenColumnIndex; ci < this.colGroup.length; ci++) {\n                // bodyScrollLeft\n                this.colGroup[ci]._sx = (ci == this.xvar.frozenColumnIndex) ? 0 : this.colGroup[ci - 1]._ex;\n                this.colGroup[ci]._ex = this.colGroup[ci]._sx + this.colGroup[ci]._width;\n\n                if (this.colGroup[ci]._sx <= bodyScrollLeft && this.colGroup[ci]._ex >= bodyScrollLeft) {\n                    paintStartColumnIndex = ci;\n                }\n                if (this.colGroup[ci]._sx <= (bodyScrollLeft + this.xvar.bodyWidth) && this.colGroup[ci]._ex >= (bodyScrollLeft + this.xvar.bodyWidth)) {\n                    paintEndColumnIndex = ci;\n\n                    if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = this.colGroup[paintStartColumnIndex]._sx;\n                    if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = this.xvar.scrollContentWidth - this.colGroup[ci]._ex;\n                }\n            }\n\n            if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = 0;\n            if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = 0;\n            this.$.panel[\"top-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n            this.$.panel[\"body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n            this.$.panel[\"bottom-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n        }\n\n        let isFirstPaint = (typeof this.xvar.paintStartRowIndex === \"undefined\"),\n            headerColGroup = this.headerColGroup,\n            asideBodyRowData = this.asideBodyRowData,\n            leftBodyRowData = this.leftBodyRowData,\n            bodyRowData = this.bodyRowData,\n            leftFootSumData = this.leftFootSumData,\n            footSumData = this.footSumData,\n            asideBodyGroupingData = this.asideBodyGroupingData,\n            leftBodyGroupingData = this.leftBodyGroupingData,\n            bodyGroupingData = this.bodyGroupingData,\n            bodyAlign = cfg.body.align,\n            paintRowCount = Math.ceil(this.xvar.bodyHeight / this.xvar.bodyTrHeight) + 1;\n\n        if (\n            this.xvar.dataRowCount === list.length\n            && this.xvar.paintStartRowIndex === paintStartRowIndex\n            && this.xvar.paintRowCount === paintRowCount\n            && this.xvar.paintStartColumnIndex === paintStartColumnIndex\n            && this.xvar.paintEndColumnIndex === paintEndColumnIndex\n        ) return this; // 스크롤 포지션 변경 여부에 따라 프로세스 진행여부 결정\n\n\n        // bodyRowData 수정 : 페인트 컬럼 포지션이 달라지므로\n        if (nopaintLeftColumnsWidth || nopaintRightColumnsWidth) {\n            headerColGroup = [].concat(headerColGroup).splice(paintStartColumnIndex - this.xvar.frozenColumnIndex, paintEndColumnIndex - paintStartColumnIndex + 1 + this.xvar.frozenColumnIndex);\n            bodyRowData = GRID.util.getTableByStartEndColumnIndex(bodyRowData, paintStartColumnIndex, paintEndColumnIndex);\n\n            if (cfg.body.grouping) {\n                bodyGroupingData = GRID.util.getTableByStartEndColumnIndex(bodyGroupingData, paintStartColumnIndex, paintEndColumnIndex);\n            }\n            if (cfg.footSum) {\n                footSumData = GRID.util.getTableByStartEndColumnIndex(footSumData, paintStartColumnIndex, paintEndColumnIndex);\n            }\n\n            if (this.xvar.paintStartColumnIndex !== paintStartColumnIndex || this.xvar.paintEndColumnIndex !== paintEndColumnIndex) {\n                this.needToPaintSum = true;\n            }\n        }\n\n        if (document.addEventListener && ax5.info.supportTouch) {\n            paintRowCount = paintRowCount * 2;\n        }\n\n        /// 스크롤 컨텐츠의 높이 : 그리드 스크롤의 실제 크기와는 관계 없이 데이터 갯수에 따라 스크롤 컨텐츠 높이값 구해서 저장해두기.\n        this.xvar.scrollContentHeight = this.xvar.bodyTrHeight * (this.list.length - this.xvar.frozenRowIndex);\n        /// 사용된 패널들의 키 모음\n        this.$.livePanelKeys = [];\n\n        // 그리드 바디 영역 페인트 함수\n        /**\n         * @param _elTargetKey\n         * @param _colGroup\n         * @param _bodyRow\n         * @param _groupRow\n         * @param _list\n         * @param [_scrollConfig]\n         * @returns {boolean}\n         */\n        let repaintBody = function (_elTargetKey, _colGroup, _bodyRow, _groupRow, _list, _scrollConfig) {\n            let _elTarget = this.$.panel[_elTargetKey];\n\n            if (!isFirstPaint && !_scrollConfig) {\n                this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n                return false;\n            }\n\n            let SS = [],\n                cgi, cgl, di, dl, tri, trl, ci, cl, col, cellHeight, colAlign,\n                isScrolled = (function () {\n                    // 스크롤값이 변경되거나 처음 호출되었습니까?\n                    if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n                        _scrollConfig = {\n                            paintStartRowIndex: 0,\n                            paintRowCount: _list.length\n                        };\n                        return false;\n                    } else {\n                        return true;\n                    }\n                })();\n\n            if (isScrolled) {\n                SS.push('<div style=\"font-size:0;line-height:0;height: ' + (_scrollConfig.paintStartRowIndex - this.xvar.frozenRowIndex) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n            }\n\n            // 가로 가상 스크롤 적용하지 않는 경우\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n\n            for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n                let len;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            })(); di < dl; di++) {\n                if(_list[di]) {\n                    let isGroupingRow = false, rowTable;\n                    if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n                        rowTable = _groupRow;\n                        isGroupingRow = true;\n                    } else {\n                        rowTable = _bodyRow;\n                    }\n\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n\n                        SS.push('<tr class=\"tr-' + (di % 4) + '\"',\n                            (isGroupingRow) ? ' data-ax5grid-grouping-tr=\"true\"' : '',\n                            ' data-ax5grid-tr-data-index=\"' + di + '\"',\n                            ' data-ax5grid-selected=\"' + (_list[di][cfg.columnKeys.selected] || \"false\") + '\"',\n                            ' data-ax5grid-disable-selection=\"' + (_list[di][cfg.columnKeys.disableSelection] || \"false\") + '\"',\n                            '>');\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                            col = rowTable.rows[tri].cols[ci];\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                            colAlign = col.align || bodyAlign;\n\n                            SS.push('<td ',\n                                'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                                'data-ax5grid-data-index=\"' + di + '\" ',\n                                'data-ax5grid-column-row=\"' + tri + '\" ',\n                                'data-ax5grid-column-col=\"' + ci + '\" ',\n                                'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                                'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                                'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                                (function (_focusedColumn, _selectedColumn) {\n                                    let attrs = \"\";\n                                    if (_focusedColumn) {\n                                        attrs += 'data-ax5grid-column-focused=\"true\" ';\n                                    }\n                                    if (_selectedColumn) {\n                                        attrs += 'data-ax5grid-column-selected=\"true\" ';\n                                    }\n                                    return attrs;\n                                })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                                'colspan=\"' + col.colspan + '\" ',\n                                'rowspan=\"' + col.rowspan + '\" ',\n                                'class=\"' + (function (_col) {\n                                    let tdCSS_class = \"\";\n                                    if (_col.styleClass) {\n                                        if (U.isFunction(_col.styleClass)) {\n                                            tdCSS_class += _col.styleClass.call({\n                                                    column: _col,\n                                                    key: _col.key,\n                                                    item: _list[di],\n                                                    index: di\n                                                }) + \" \";\n                                        } else {\n                                            tdCSS_class += _col.styleClass + \" \";\n                                        }\n                                    }\n                                    if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                    if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                    return tdCSS_class;\n                                }).call(this, col) + '\" ',\n                                'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                            SS.push((function (_cellHeight) {\n                                let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                                if (!col.multiLine) {\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                                }\n\n                                return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                    ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                                    '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                            })(cellHeight), (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n\n                            SS.push('</td>');\n                        }\n                        SS.push('<td ',\n                            'data-ax5grid-column-row=\"null\" ',\n                            'data-ax5grid-column-col=\"null\" ',\n                            'data-ax5grid-data-index=\"' + di + '\" ',\n                            'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\n                            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                            '></td>');\n                        SS.push('</tr>');\n                    }\n                }\n            }\n            SS.push('</table>');\n\n            if (isScrolled && _list.length) {\n                SS.push('<div style=\"font-size:0;line-height:0;height: ' + (_list.length - di) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n            }\n\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return true;\n        };\n\n        /**\n         * @param _elTargetKey\n         * @param _colGroup\n         * @param _bodyRow\n         * @param _list\n         * @param [_scrollConfig]\n         * @returns {boolean}\n         */\n        let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n            let _elTarget = this.$.panel[_elTargetKey];\n\n            if (!isFirstPaint && !_scrollConfig) {\n                this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n                return false;\n            }\n\n            let SS = [], cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ',\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        'data-ax5grid-column-rowIndex=\"' + tri + '\" ',\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                        (function (_focusedColumn, _selectedColumn) {\n                            var attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            var tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            isFootSum: true\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function (_cellHeight) {\n                        let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                    })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'data-ax5grid-column-attr=\"' + (\"sum\") + '\" ',\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return true;\n        };\n\n        /**\n         * @param _elTargetKey\n         * @param _colGroup\n         * @param _bodyRow\n         * @param _list\n         * @param [_scrollConfig]\n         * @returns {boolean}\n         */\n        let mergeCellsBody = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n            let tblRowMaps = [];\n            let _elTarget = this.$.panel[_elTargetKey];\n            let token = {}, hasMergeTd;\n            //console.log(_elTarget);\n\n            // 테이블의 td들을 수잡하여 저장해두고 스크립트로 반복하여 정리.\n            let tableTrs = _elTarget.find(\"tr\");\n            for (let ri = 0, rl = tableTrs.length; ri < rl; ri++) {\n                let tableTrTds, trMaps;\n\n                if (!tableTrs[ri].getAttribute(\"data-ax5grid-grouping-tr\")) {\n                    tableTrTds = tableTrs[ri].childNodes;\n                    trMaps = [];\n                    for (let ci = 0, cl = tableTrTds.length; ci < cl; ci++) {\n                        let tdObj = {\n                            \"$\": jQuery(tableTrTds[ci])\n                        };\n\n                        if (tdObj[\"$\"].attr(\"data-ax5grid-column-col\") != \"null\") {\n                            tdObj.dindex = tdObj[\"$\"].attr(\"data-ax5grid-data-index\");\n                            tdObj.tri = tdObj[\"$\"].attr(\"data-ax5grid-column-row\");\n                            tdObj.ci = tdObj[\"$\"].attr(\"data-ax5grid-column-col\");\n                            tdObj.rowIndex = tdObj[\"$\"].attr(\"data-ax5grid-column-rowIndex\");\n                            tdObj.colIndex = tdObj[\"$\"].attr(\"data-ax5grid-column-colIndex\");\n                            tdObj.rowspan = tdObj[\"$\"].attr(\"rowspan\");\n                            tdObj.text = tdObj[\"$\"].text();\n                            trMaps.push(tdObj);\n                        }\n\n                        tdObj = null;\n                    }\n                    tblRowMaps.push(trMaps);\n                }\n\n            }\n\n\n            // 두줄이상 일 때 의미가 있으니.\n            if (tblRowMaps.length > 1) {\n                hasMergeTd = false;\n                for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n                    let prevTokenColIndexs = [];\n                    for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n                        // 적용 하려는 컬럼에 editor 속성이 없다면 머지 대상입니다.\n                        if (!_colGroup[ci].editor && (() => {\n                                if (U.isArray(cfg.body.mergeCells)) {\n                                    return ax5.util.search(cfg.body.mergeCells, _colGroup[ci].key) > -1;\n                                } else {\n                                    return true;\n                                }\n                            })()) {\n\n                            // 앞줄과 값이 같다면.\n                            if (token[ci] && (() => {\n                                    if (prevTokenColIndexs.length > 0) {\n                                        let hasFalse = true;\n                                        prevTokenColIndexs.forEach(function (ti) {\n                                            if (tblRowMaps[ri - 1][ti].text != tblRowMaps[ri][ti].text) {\n                                                hasFalse = false;\n                                            }\n                                        });\n                                        return hasFalse;\n                                    } else {\n                                        return true;\n                                    }\n                                })() && token[ci].text == tblRowMaps[ri][ci].text) {\n                                tblRowMaps[ri][ci].rowspan = 0;\n                                tblRowMaps[token[ci].ri][ci].rowspan++;\n                                hasMergeTd = true;\n                            } else {\n                                token[ci] = {\n                                    ri: ri,\n                                    ci: ci,\n                                    text: tblRowMaps[ri][ci].text\n                                };\n                            }\n\n                            prevTokenColIndexs.push(ci);\n                        }\n                    }\n                }\n\n                // rowspan을 다 구했으면 적용합니다.\n                if (hasMergeTd) {\n                    for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n                        for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n                            if (tblRowMaps[ri][ci].rowspan == 0) {\n                                tblRowMaps[ri][ci][\"$\"].remove();\n                            } else if (tblRowMaps[ri][ci].rowspan > 1) {\n                                tblRowMaps[ri][ci][\"$\"]\n                                    .attr(\"rowspan\", tblRowMaps[ri][ci].rowspan)\n                                    .addClass(\"merged\");\n                            }\n                        }\n                    }\n                }\n            }\n        };\n\n        let scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            paintStartColumnIndex: paintStartColumnIndex,\n            paintEndColumnIndex: paintEndColumnIndex,\n            nopaintLeftColumnsWidth: nopaintLeftColumnsWidth,\n            nopaintRightColumnsWidth: nopaintRightColumnsWidth,\n            bodyTrHeight: this.xvar.bodyTrHeight,\n        };\n\n        // aside\n        if (cfg.asidePanelWidth > 0) {\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                repaintBody.call(this, \"top-aside-body\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n\n            repaintBody.call(this, \"aside-body-scroll\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list, scrollConfig);\n\n            if (cfg.footSum) {\n                // 바닥 요약 (footSum에 대한 aside 사용안함)\n                //repaintSum.call(this, \"bottom-aside-body\", this.asideColGroup, asideBodyRowData, null, list);\n            }\n        }\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                repaintBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n\n            repaintBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list, scrollConfig);\n\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n            }\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            repaintBody.call(this, \"top-body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), jQuery.extend({}, scrollConfig, {\n                paintStartRowIndex: 0,\n                paintRowCount: this.xvar.frozenRowIndex\n            }));\n        }\n        repaintBody.call(this, \"body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list, scrollConfig);\n\n        // 바닥 요약\n        if (cfg.footSum && this.needToPaintSum) {\n            repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n        }\n        // right\n        if (cfg.rightSum) {\n            // todo : right 표현 정리\n        }\n\n        /// mergeCells\n        if (cfg.body.mergeCells && this.list.length) {\n            // left\n            if (this.xvar.frozenColumnIndex > 0) {\n                if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n                    // console.log(this.leftHeaderColGroup, leftBodyRowData);\n                    mergeCellsBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n                }\n                mergeCellsBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, scrollConfig);\n            }\n\n            // body\n            if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n                mergeCellsBody.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n            mergeCellsBody.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, scrollConfig);\n        }\n\n        this.xvar.paintStartRowIndex = paintStartRowIndex;\n        this.xvar.paintRowCount = paintRowCount;\n        this.xvar.paintStartColumnIndex = paintStartColumnIndex;\n        this.xvar.paintEndColumnIndex = paintEndColumnIndex;\n        this.xvar.nopaintLeftColumnsWidth = nopaintLeftColumnsWidth;\n        this.xvar.nopaintRightColumnsWidth = nopaintRightColumnsWidth;\n        this.xvar.dataRowCount = list.length;\n        this.needToPaintSum = false;\n\n        GRID.page.statusUpdate.call(this);\n    };\n\n    let repaintCell = function (_panelName, _dindex, _rowIndex, _colIndex, _newValue) {\n        let self = this,\n            cfg = this.config,\n            list = this.list;\n\n        let updateCell = this.$[\"panel\"][_panelName]\n                .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\n                .find('[data-ax5grid-column-rowindex=\"' + _rowIndex + '\"][data-ax5grid-column-colindex=\"' + _colIndex + '\"]')\n                .find('[data-ax5grid-cellholder]'),\n            colGroup = this.colGroup,\n            col = colGroup[_colIndex];\n\n        updateCell.html(getFieldValue.call(this, list, list[_dindex], _dindex, col));\n\n        if (col.editor && col.editor.updateWith) {\n            col.editor.updateWith.forEach(function (updateColumnKey) {\n                colGroup.forEach(function (col) {\n                    if (col.key == updateColumnKey) {\n                        let rowIndex = col.rowIndex, colIndex = col.colIndex,\n                            panelName = GRID.util.findPanelByColumnIndex.call(self, _dindex, colIndex, rowIndex).panelName,\n                            updateWithCell = self.$[\"panel\"][panelName]\n                                .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\n                                .find('[data-ax5grid-column-rowindex=\"' + rowIndex + '\"][data-ax5grid-column-colindex=\"' + colIndex + '\"]')\n                                .find('[data-ax5grid-cellholder]');\n\n                        updateWithCell.html(getFieldValue.call(self, list, list[_dindex], _dindex, col));\n                    }\n                });\n            });\n        }\n\n        /// ~~~~~~\n\n        let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n            headerColGroup = this.headerColGroup,\n            leftFootSumData = this.leftFootSumData,\n            footSumData = this.footSumData,\n            leftBodyGroupingData = this.leftBodyGroupingData,\n            bodyGroupingData = this.bodyGroupingData,\n            bodyAlign = cfg.body.align,\n            paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n            scrollConfig = {\n                paintStartRowIndex: paintStartRowIndex,\n                paintRowCount: paintRowCount,\n                bodyTrHeight: this.xvar.bodyTrHeight\n            };\n\n        if (this.xvar.nopaintLeftColumnsWidth || this.xvar.nopaintRightColumnsWidth) {\n            headerColGroup = [].concat(headerColGroup).splice(this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex - this.xvar.paintStartColumnIndex + 1);\n            if (cfg.body.grouping) {\n                bodyGroupingData = GRID.util.getTableByStartEndColumnIndex(bodyGroupingData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n            }\n            if (cfg.footSum) {\n                footSumData = GRID.util.getTableByStartEndColumnIndex(footSumData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n            }\n        }\n\n        let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n            let _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ',\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        'data-ax5grid-column-rowIndex=\"' + tri + '\" ',\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                        (function (_focusedColumn, _selectedColumn) {\n                            var attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            let tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            isFootSum: true\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function (_cellHeight) {\n                        let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                    })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'data-ax5grid-column-attr=\"' + (\"sum\") + '\" ',\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n            return true;\n        };\n        let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n            let _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                di, dl, tri, trl, ci, cl,\n                col, cellHeight, colAlign;\n\n            for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n                let len;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            })(); di < dl; di++) {\n                if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n                    let rowTable = _groupRow;\n                    SS = [];\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                            col = rowTable.rows[tri].cols[ci];\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                            colAlign = col.align || bodyAlign;\n\n                            SS.push('<td ',\n                                'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                                'data-ax5grid-data-index=\"' + di + '\" ',\n                                'data-ax5grid-column-row=\"' + tri + '\" ',\n                                'data-ax5grid-column-col=\"' + ci + '\" ',\n                                'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                                'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                                'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                                (function (_focusedColumn, _selectedColumn) {\n                                    let attrs = \"\";\n                                    if (_focusedColumn) {\n                                        attrs += 'data-ax5grid-column-focused=\"true\" ';\n                                    }\n                                    if (_selectedColumn) {\n                                        attrs += 'data-ax5grid-column-selected=\"true\" ';\n                                    }\n                                    return attrs;\n                                })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                                'colspan=\"' + col.colspan + '\" ',\n                                'rowspan=\"' + col.rowspan + '\" ',\n                                'class=\"' + (function (_col) {\n                                    let tdCSS_class = \"\";\n                                    if (_col.styleClass) {\n                                        if (U.isFunction(_col.styleClass)) {\n                                            tdCSS_class += _col.styleClass.call({\n                                                    column: _col,\n                                                    key: _col.key,\n                                                    item: _list[di],\n                                                    index: di\n                                                }) + \" \";\n                                        } else {\n                                            tdCSS_class += _col.styleClass + \" \";\n                                        }\n                                    }\n                                    if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                    if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                    return tdCSS_class;\n                                }).call(this, col) + '\" ',\n                                'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                            SS.push((function (_cellHeight) {\n                                let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                                if (!col.multiLine) {\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                                }\n\n                                return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                    ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                                    '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                            })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                            SS.push('</td>');\n                        }\n                        SS.push('<td ',\n                            'data-ax5grid-column-row=\"null\" ',\n                            'data-ax5grid-column-col=\"null\" ',\n                            'data-ax5grid-data-index=\"' + di + '\" ',\n                            'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\n                            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                            '></td>');\n                    }\n                    _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n                }\n            }\n        };\n\n        // body.grouping tr 다시 그리기..\n        if (cfg.body.grouping) {\n            // left\n            if (this.xvar.frozenColumnIndex > 0) {\n                if (this.xvar.frozenRowIndex > 0) {\n                    // 상단 행고정\n                    replaceGroupTr.call(this, \"top-left-body\", headerColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n                        paintStartRowIndex: 0,\n                        paintRowCount: this.xvar.frozenRowIndex,\n                        bodyTrHeight: this.xvar.bodyTrHeight\n                    });\n                }\n                replaceGroupTr.call(this, \"left-body-scroll\", headerColGroup, leftBodyGroupingData, list, scrollConfig);\n            }\n\n            // body\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-body-scroll\", headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n                    paintStartRowIndex: 0,\n                    paintRowCount: this.xvar.frozenRowIndex,\n                    bodyTrHeight: this.xvar.bodyTrHeight\n                });\n            }\n\n            replaceGroupTr.call(this, \"body-scroll\", headerColGroup, bodyGroupingData, list, scrollConfig);\n        }\n\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", headerColGroup, leftFootSumData, list);\n            }\n        }\n\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n        }\n    };\n\n    let repaintRow = function (_dindex) {\n        let self = this,\n            cfg = this.config,\n            list = this.list;\n        /// ~~~~~~\n\n        let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n            asideBodyRowData = this.asideBodyRowData,\n            leftBodyRowData = this.leftBodyRowData,\n            bodyRowData = this.bodyRowData,\n            leftFootSumData = this.leftFootSumData,\n            footSumData = this.footSumData,\n            asideBodyGroupingData = this.asideBodyGroupingData,\n            leftBodyGroupingData = this.leftBodyGroupingData,\n            bodyGroupingData = this.bodyGroupingData,\n            bodyAlign = cfg.body.align,\n            paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n            scrollConfig = {\n                paintStartRowIndex: paintStartRowIndex,\n                paintRowCount: paintRowCount,\n                bodyTrHeight: this.xvar.bodyTrHeight\n            };\n\n        let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list) {\n            let _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ',\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        'data-ax5grid-column-rowIndex=\"' + tri + '\" ',\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                        (function (_focusedColumn, _selectedColumn) {\n                            var attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            var tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            isFootSum: true\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function (_cellHeight) {\n                        var lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                    })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'data-ax5grid-column-attr=\"' + (\"sum\") + '\" ',\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n            return true;\n        };\n        let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n            let _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                di, dl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n            if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n                _scrollConfig = {\n                    paintStartRowIndex: 0,\n                    paintRowCount: _list.length\n                };\n            }\n\n            for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n                let len;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            })(); di < dl; di++) {\n                if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n                    let rowTable = _groupRow;\n                    SS = [];\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                            col = rowTable.rows[tri].cols[ci];\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                            colAlign = col.align || bodyAlign;\n\n                            SS.push('<td ',\n                                'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                                'data-ax5grid-data-index=\"' + di + '\" ',\n                                'data-ax5grid-column-row=\"' + tri + '\" ',\n                                'data-ax5grid-column-col=\"' + ci + '\" ',\n                                'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                                'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                                'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                                (function (_focusedColumn, _selectedColumn) {\n                                    let attrs = \"\";\n                                    if (_focusedColumn) {\n                                        attrs += 'data-ax5grid-column-focused=\"true\" ';\n                                    }\n                                    if (_selectedColumn) {\n                                        attrs += 'data-ax5grid-column-selected=\"true\" ';\n                                    }\n                                    return attrs;\n                                })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                                'colspan=\"' + col.colspan + '\" ',\n                                'rowspan=\"' + col.rowspan + '\" ',\n                                'class=\"' + (function (_col) {\n                                    let tdCSS_class = \"\";\n                                    if (_col.styleClass) {\n                                        if (U.isFunction(_col.styleClass)) {\n                                            tdCSS_class += _col.styleClass.call({\n                                                    column: _col,\n                                                    key: _col.key,\n                                                    item: _list[di],\n                                                    index: di\n                                                }) + \" \";\n                                        } else {\n                                            tdCSS_class += _col.styleClass + \" \";\n                                        }\n                                    }\n                                    if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                    if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                    return tdCSS_class;\n                                }).call(this, col) + '\" ',\n                                'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                            SS.push((function (_cellHeight) {\n                                let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                                if (!col.multiLine) {\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                                }\n\n                                return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                    ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                                    '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                            })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                            SS.push('</td>');\n                        }\n                        SS.push('<td ',\n                            'data-ax5grid-column-row=\"null\" ',\n                            'data-ax5grid-column-col=\"null\" ',\n                            'data-ax5grid-data-index=\"' + di + '\" ',\n                            'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\n                            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                            '></td>');\n                    }\n                    _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n                }\n            }\n        };\n        let replaceTr = function (_elTargetKey, _colGroup, _bodyRow, _list, di) {\n            let _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                tri, trl, ci, cl, col, cellHeight, colAlign, rowTable = _bodyRow;\n\n            for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                    col = rowTable.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ',\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                        'data-ax5grid-data-index=\"' + di + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                        (function (_focusedColumn, _selectedColumn) {\n                            let attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            let tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function (_cellHeight) {\n                        let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                    })(cellHeight), getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'data-ax5grid-data-index=\"' + di + '\" ',\n                    'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n            }\n\n            _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n        };\n\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > _dindex) {\n                // 상단 행고정\n                replaceTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n            } else {\n                replaceTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, _dindex);\n            }\n\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > _dindex) {\n            // 상단 행고정\n            replaceTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n        } else {\n            replaceTr.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, _dindex);\n        }\n\n\n        // body.grouping tr 다시 그리기..\n        if (cfg.body.grouping) {\n            // left\n            if (this.xvar.frozenColumnIndex > 0) {\n                if (this.xvar.frozenRowIndex > _dindex) {\n                    // 상단 행고정\n                    replaceGroupTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n                } else {\n                    replaceGroupTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyGroupingData, list, scrollConfig);\n                }\n            }\n\n            // body\n            if (this.xvar.frozenRowIndex > _dindex) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            } else {\n                replaceGroupTr.call(this, \"body-scroll\", this.headerColGroup, bodyGroupingData, list, scrollConfig);\n            }\n        }\n\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n            }\n        }\n\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\n        }\n    };\n\n    let scrollTo = function (css, noRepaint) {\n\n        if (this.isInlineEditing) {\n            for (var key in this.inlineEditing) {\n                //if(this.inlineEditing[key].editor.type === \"select\") {}\n                // 인라인 에디팅 인데 스크롤 이벤트가 발생하면 디액티브 처리\n                GRID.body.inlineEdit.deActive.call(this, \"ESC\", key);\n            }\n        }\n\n        if (this.config.asidePanelWidth > 0 && \"top\" in css) {\n            this.$.panel[\"aside-body-scroll\"].css({top: css.top});\n        }\n        if (this.xvar.frozenColumnIndex > 0 && \"top\" in css) {\n            this.$.panel[\"left-body-scroll\"].css({top: css.top});\n        }\n        if (this.xvar.frozenRowIndex > 0 && \"left\" in css) {\n            this.$.panel[\"top-body-scroll\"].css({left: css.left});\n        }\n\n        this.$.panel[\"body-scroll\"].css(css);\n\n        if (this.config.footSum && \"left\" in css) {\n            this.$.panel[\"bottom-body-scroll\"].css({left: css.left});\n        }\n\n        if (!noRepaint && \"top\" in css) {\n            repaint.call(this);\n        } else if (this.config.virtualScrollX && !noRepaint && \"left\" in css) {\n            repaint.call(this);\n        }\n    };\n\n    let blur = function () {\n        columnSelect.focusClear.call(this);\n        columnSelect.clear.call(this);\n        if (this.isInlineEditing) {\n            inlineEdit.deActive.call(this);\n        }\n    };\n\n    let moveFocus = function (_position) {\n        let focus = {\n            \"UD\": function (_dy) {\n                let moveResult = true,\n                    focusedColumn, originalColumn, while_i,\n                    nPanelInfo;\n\n                for (let c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n\n                if (!focusedColumn) return false;\n\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n                if (_dy > 0) {\n                    if (focusedColumn.rowIndex + (originalColumn.rowspan - 1) + _dy > this.bodyRowTable.rows.length - 1) {\n                        focusedColumn.dindex = focusedColumn.dindex + _dy;\n                        focusedColumn.rowIndex = 0;\n                        if (focusedColumn.dindex > this.list.length - 1) {\n                            focusedColumn.dindex = this.list.length - 1;\n                            moveResult = false;\n                        }\n                    } else {\n                        focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                    }\n                }\n                else {\n                    if (focusedColumn.rowIndex + _dy < 0) {\n                        focusedColumn.dindex = focusedColumn.dindex + _dy;\n                        focusedColumn.rowIndex = this.bodyRowTable.rows.length - 1;\n                        if (focusedColumn.dindex < 0) {\n                            focusedColumn.dindex = 0;\n                            moveResult = false;\n                        }\n                    } else {\n                        focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                    }\n                }\n\n                while_i = 0;\n                while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n                        focusedColumn.colIndex--;\n                    } else {\n                        focusedColumn.rowIndex--;\n                    }\n\n                    if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                        // find fail\n                        moveResult = false;\n                        break;\n                    }\n                    while_i++;\n                }\n\n                nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n                // if mergeCells\n                if (this.config.body.mergeCells && this.list.length) {\n                    while (!this.$.panel[nPanelInfo.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n                        if (_dy > 0) {\n                            focusedColumn.dindex++;\n                        } else {\n                            focusedColumn.dindex--;\n                        }\n\n                        if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n                            break;\n                        }\n                    }\n                    nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n                }\n\n                focusedColumn.panelName = nPanelInfo.panelName;\n\n                // 포커스 컬럼의 위치에 따라 스크롤 처리.ㅊㅇ\n                (function () {\n                    if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                        if (focusedColumn.dindex <= this.xvar.paintStartRowIndex) {\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight});\n                            GRID.scroller.resize.call(this);\n                        }\n                        else if (focusedColumn.dindex + 1 > this.xvar.paintStartRowIndex + (this.xvar.paintRowCount - 2)) {\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.paintRowCount + 3) * this.xvar.bodyTrHeight});\n                            GRID.scroller.resize.call(this);\n                        }\n                    }\n                }).call(this);\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n                this.$.panel[focusedColumn.panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                    .attr('data-ax5grid-column-focused', \"true\");\n\n                return moveResult;\n\n            },\n            \"LR\": function (_dx) {\n                let moveResult = true,\n                    focusedColumn, originalColumn,\n                    while_i = 0, isScrollPanel = false, containerPanelName = \"\", nPanelInfo;\n\n                for (var c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n                if (!focusedColumn) return false;\n\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n                if (_dx < 0) {\n                    focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n                    if (focusedColumn.colIndex < 0) {\n                        focusedColumn.colIndex = 0;\n                        moveResult = false;\n                    }\n                } else {\n                    focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n                    if (focusedColumn.colIndex > this.colGroup.length - 1) {\n                        focusedColumn.colIndex = this.colGroup.length - 1;\n                        moveResult = false;\n                    }\n                }\n\n                if (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    focusedColumn.rowIndex = 0;\n                }\n\n                if (this.list[focusedColumn.dindex] && this.list[focusedColumn.dindex].__isGrouping) {\n                    if (_dx < 0) {\n                        while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                            focusedColumn.colIndex--;\n                            if (focusedColumn.colIndex <= 0) {\n                                // find fail\n                                moveResult = false;\n                                break;\n                            }\n                        }\n                    } else {\n                        while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                            focusedColumn.colIndex++;\n                            if (focusedColumn.colIndex >= this.colGroup.length) {\n                                // find fail\n                                moveResult = false;\n                                break;\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (_dx < 0) {\n                        while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                            focusedColumn.colIndex--;\n                            if (focusedColumn.colIndex <= 0) {\n                                // find fail\n                                moveResult = false;\n                                break;\n                            }\n                        }\n                    } else {\n                        while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                            focusedColumn.colIndex++;\n                            if (focusedColumn.colIndex >= this.colGroup.length) {\n                                // find fail\n                                moveResult = false;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n                // if mergeCells\n                if (this.config.body.mergeCells && this.list.length && focusedColumn.dindex > 1) {\n                    while (!this.$.panel[nPanelInfo.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n                        focusedColumn.dindex--;\n\n                        if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n                            break;\n                        }\n                    }\n                    nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n                }\n\n                focusedColumn.panelName = nPanelInfo.panelName;\n\n                // 포커스 컬럼의 위치에 따라 스크롤 처리\n                let isScrollTo = (function () {\n                    if(!this.config.virtualScrollX) return false;\n                    let scrollLeft = 0;\n                    if (focusedColumn.colIndex + 1 > this.xvar.frozenColumnIndex) {\n                        if (focusedColumn.colIndex <= this.xvar.paintStartColumnIndex && this.colGroup[focusedColumn.colIndex]) {\n                            scrollLeft = -this.colGroup[Number(focusedColumn.colIndex)]._sx;\n                            scrollTo.call(this, {left: scrollLeft});\n                            GRID.header.scrollTo.call(this, {left: scrollLeft});\n                            GRID.scroller.resize.call(this);\n                            return true;\n                        }\n                        else if (focusedColumn.colIndex >= this.xvar.paintEndColumnIndex && this.colGroup[Number(focusedColumn.colIndex)]) {\n                            if(this.colGroup[Number(focusedColumn.colIndex)]._ex > this.xvar.bodyWidth) {\n                                scrollLeft = (this.colGroup[Number(focusedColumn.colIndex)]._ex - this.xvar.bodyWidth);\n                                scrollTo.call(this, {left: -scrollLeft});\n                                GRID.header.scrollTo.call(this, {left: -scrollLeft});\n                                GRID.scroller.resize.call(this);\n                            }\n                            return true;\n                        }\n                    }\n                    scrollLeft = null;\n                    return false;\n                }).call(this);\n                \n                containerPanelName = nPanelInfo.containerPanelName;\n                isScrollPanel = nPanelInfo.isScrollPanel;\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n\n                var $column = this.$.panel[focusedColumn.panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                    .attr('data-ax5grid-column-focused', \"true\");\n\n                if (!isScrollTo && $column && isScrollPanel) {// 스크롤 패널 이라면~\n                    // todo : 컬럼이동할 때에도 scrollTo 체크\n                    var newLeft = (function () {\n                        if ($column.position().left + $column.outerWidth() > Math.abs(this.$.panel[focusedColumn.panelName].position().left) + this.$.panel[containerPanelName].width()) {\n                            return $column.position().left + $column.outerWidth() - this.$.panel[containerPanelName].width();\n                        } else if (Math.abs(this.$.panel[focusedColumn.panelName].position().left) > $column.position().left) {\n                            return $column.position().left;\n                        } else {\n                            return;\n                        }\n                    }).call(this);\n\n                    if (typeof newLeft !== \"undefined\") {\n                        GRID.header.scrollTo.call(this, {left: -newLeft});\n                        scrollTo.call(this, {left: -newLeft});\n                        GRID.scroller.resize.call(this);\n                    }\n                }\n\n                return moveResult;\n            },\n            \"INDEX\": function (_dindex) {\n                let moveResult = true,\n                    focusedColumn, originalColumn,\n                    while_i;\n\n                for (let c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n                if (!focusedColumn) {\n                    focusedColumn = {\n                        rowIndex: 0,\n                        colIndex: 0\n                    }\n                }\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n\n                if (_dindex == \"end\") {\n                    _dindex = this.list.length - 1;\n                }\n\n                focusedColumn.dindex = _dindex;\n                focusedColumn.rowIndex = 0;\n\n                while_i = 0;\n                while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n                        focusedColumn.colIndex--;\n                    } else {\n                        focusedColumn.rowIndex--;\n                    }\n\n                    if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                        // find fail\n                        break;\n                    }\n                    while_i++;\n                }\n\n                let nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n                focusedColumn.panelName = nPanelInfo.panelName;\n\n                // 포커스 컬럼의 위치에 따라 스크롤 처리.\n                (function () {\n                    if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                        if (focusedColumn.dindex < this.xvar.paintStartRowIndex) {\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight});\n                            GRID.scroller.resize.call(this);\n                        }\n                        else if (focusedColumn.dindex + 1 > this.xvar.paintStartRowIndex + (this.xvar.paintRowCount - 2)) {\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.paintRowCount + 3) * this.xvar.bodyTrHeight});\n                            GRID.scroller.resize.call(this);\n                        }\n                    }\n                }).call(this);\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n                this.$.panel[focusedColumn.panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                    .attr('data-ax5grid-column-focused', \"true\");\n\n                return moveResult;\n            }\n        };\n\n        let processor = {\n            \"UP\": function () {\n                return focus[\"UD\"].call(this, -1);\n            },\n            \"DOWN\": function () {\n                return focus[\"UD\"].call(this, 1);\n            },\n            \"LEFT\": function () {\n                return focus[\"LR\"].call(this, -1);\n            },\n            \"RIGHT\": function () {\n                return focus[\"LR\"].call(this, 1);\n            },\n            \"HOME\": function () {\n                return focus[\"INDEX\"].call(this, 0);\n            },\n            \"END\": function () {\n                return focus[\"INDEX\"].call(this, \"end\");\n            },\n            \"position\": function (_position) {\n                return focus[\"INDEX\"].call(this, _position);\n            }\n        };\n\n        if (_position in processor) {\n            return processor[_position].call(this);\n        } else {\n            return processor[\"position\"].call(this, _position);\n        }\n    };\n\n    const inlineEdit = {\n        active(_focusedColumn, _e, _initValue) {\n            var self = this,\n                dindex, colIndex, rowIndex, panelName, colspan,\n                col, editor;\n\n            // this.inlineEditing = {};\n            for (var key in _focusedColumn) {\n                panelName = _focusedColumn[key].panelName;\n                dindex = _focusedColumn[key].dindex;\n                colIndex = _focusedColumn[key].colIndex;\n                rowIndex = _focusedColumn[key].rowIndex;\n                colspan = _focusedColumn[key].colspan;\n\n                // 인라인 에디팅을 멈춰야 하는 경우 조건\n                col = this.colGroup[colIndex];\n                if (!(editor = col.editor)) return this;\n\n                // editor disabled 체크\n                if (U.isFunction(editor.disabled)) {\n                    if (editor.disabled.call({\n                            list: this.list,\n                            dindex: dindex,\n                            item: this.list[dindex],\n                            key: col.key,\n                            value: _initValue\n                        })) {\n                        return this;\n                    }\n                }\n\n                // 조건에 맞지 않는 에디팅 타입이면 반응 없음.\n                if (!(function (_editor, _type) {\n                        if (_editor.type in GRID.inlineEditor) {\n                            return (GRID.inlineEditor[_editor.type].editMode == \"popup\");\n                        }\n                    })(editor)) {\n                    // 체크 박스 타입이면 값 변경 시도\n                    if (editor.type == \"checkbox\") {\n                        var checked, newValue;\n                        if (editor.config && editor.config.trueValue) {\n                            if (checked = !(_initValue == editor.config.trueValue)) {\n                                newValue = editor.config.trueValue;\n                            } else {\n                                newValue = editor.config.falseValue;\n                            }\n                        } else {\n                            newValue = checked = (_initValue == false || _initValue == \"false\" || _initValue < \"1\") ? \"true\" : \"false\";\n                        }\n\n                        GRID.data.setValue.call(self, dindex, col.key, newValue);\n                        updateRowState.call(self, [\"cellChecked\"], dindex, {\n                            key: col.key, rowIndex: rowIndex, colIndex: colIndex,\n                            editorConfig: col.editor.config, checked: checked\n                        });\n                    }\n                    return this;\n                }\n\n                if (this.list[dindex].__isGrouping) {\n                    return false;\n                }\n                if (key in this.inlineEditing) {\n                    return false;\n                }\n                this.inlineEditing[key] = {\n                    editor: editor,\n                    panelName: panelName,\n                    columnKey: key,\n                    column: _focusedColumn[key],\n                    useReturnToSave: GRID.inlineEditor[editor.type].useReturnToSave\n                };\n                this.isInlineEditing = true;\n            }\n            if (this.isInlineEditing) {\n\n                let originalValue = GRID.data.getValue.call(self, dindex, col.key),\n                    initValue = (function (__value, __editor) {\n                        if (U.isNothing(__value)) {\n                            __value = U.isNothing(originalValue) ? \"\" : originalValue;\n                        }\n\n                        if (__editor.type == \"money\") {\n                            return U.number(__value, {\"money\": true});\n                        }\n                        else {\n                            return __value;\n                        }\n                    }).call(this, _initValue, editor);\n\n                this.inlineEditing[key].$inlineEditorCell = this.$[\"panel\"][panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + dindex + '\"]')\n                    .find('[data-ax5grid-column-rowindex=\"' + rowIndex + '\"][data-ax5grid-column-colindex=\"' + colIndex + '\"]')\n                    .find('[data-ax5grid-cellholder]');\n\n                this.inlineEditing[key].$inlineEditor = GRID.inlineEditor[editor.type].init(this, key, editor, this.inlineEditing[key].$inlineEditorCell, initValue);\n\n                return true;\n            }\n        },\n        deActive(_msg, _key, _value) {\n            // console.log(this.inlineEditing.column.dindex, this.inlineEditing.$inlineEditor.val());\n            if (!this.inlineEditing[_key]) return this;\n\n            let panelName = this.inlineEditing[_key].panelName,\n                dindex = this.inlineEditing[_key].column.dindex,\n                rowIndex = this.inlineEditing[_key].column.rowIndex,\n                colIndex = this.inlineEditing[_key].column.colIndex,\n                column = this.bodyRowMap[this.inlineEditing[_key].column.rowIndex + \"_\" + this.inlineEditing[_key].column.colIndex],\n                editorValue = (function ($inlineEditor) {\n                    if (typeof _value === \"undefined\") {\n                        if ($inlineEditor.get(0).tagName == \"SELECT\" || $inlineEditor.get(0).tagName == \"INPUT\" || $inlineEditor.get(0).tagName == \"TEXTAREA\") {\n                            return $inlineEditor.val();\n                        } else {\n                            _msg = \"CANCEL\";\n                            return false;\n                        }\n                    } else {\n                        return _value;\n                    }\n                })(this.inlineEditing[_key].$inlineEditor),\n                newValue = (function (__value, __editor) {\n                    if (__editor.type == \"money\") {\n                        return U.number(__value);\n                    }\n                    else {\n                        return __value;\n                    }\n                }).call(this, editorValue, column.editor);\n\n            let action = {\n                \"CANCEL\"(_dindex, _column, _newValue) {\n                    action[\"__clear\"].call(this);\n                },\n                \"RETURN\"(_dindex, _column, _newValue) {\n                    if (GRID.data.setValue.call(this, _dindex, _column.key, _newValue)) {\n                        action[\"__clear\"].call(this);\n                        GRID.body.repaintCell.call(this, panelName, dindex, rowIndex, colIndex, _newValue);\n                    } else {\n                        action[\"__clear\"].call(this);\n                    }\n                },\n                \"__clear\"() {\n                    this.isInlineEditing = false;\n                    let bindedAx5ui = this.inlineEditing[_key].$inlineEditor.data(\"binded-ax5ui\");\n                    if (bindedAx5ui == \"ax5picker\") {\n                        this.inlineEditing[_key].$inlineEditor.ax5picker(\"close\");\n                    } else if (bindedAx5ui == \"ax5select\") {\n                        this.inlineEditing[_key].$inlineEditor.ax5select(\"close\");\n                    }\n\n                    this.inlineEditing[_key].$inlineEditor.remove();\n                    this.inlineEditing[_key].$inlineEditor = null;\n                    this.inlineEditing[_key].$inlineEditorCell = null;\n                    this.inlineEditing[_key] = undefined;\n                    delete this.inlineEditing[_key]; // delete 지원안하는 브라우저 테스트..\n                }\n            };\n\n            if (_msg in action) {\n                action[_msg || \"RETURN\"].call(this, dindex, column, newValue);\n            } else {\n                action[\"__clear\"].call(this);\n            }\n        },\n        keydown(key, columnKey, _options) {\n            let processor = {\n                \"ESC\"() {\n                    for (var columnKey in this.inlineEditing) {\n                        inlineEdit.deActive.call(this, \"CANCEL\", columnKey);\n                    }\n                },\n                \"RETURN\"() {\n                    if (this.isInlineEditing) {\n                        if (this.inlineEditing[columnKey] && this.inlineEditing[columnKey].useReturnToSave) { // todo : 네이밍 검증 할 필요있음.\n                            inlineEdit.deActive.call(this, \"RETURN\", columnKey);\n                        }\n                    } else {\n\n                        for (var k in this.focusedColumn) {\n                            let _column = this.focusedColumn[k],\n                                column = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                                dindex = _column.dindex,\n                                value = \"\",\n                                col = this.colGroup[_column.colIndex];\n                            ;\n\n                            if (column) {\n                                if (!this.list[dindex].__isGrouping) {\n                                    value = GRID.data.getValue.call(this, dindex, column.key);\n                                }\n                            }\n\n                            if (col.editor && GRID.inlineEditor[col.editor.type].editMode === \"inline\") {\n                                if (_options && _options.moveFocus) {\n\n                                }\n                                else {\n                                    if (column.editor && column.editor.type == \"checkbox\") {\n                                        value = GRID.data.getValue.call(this, dindex, column.key);\n\n                                        let checked, newValue;\n                                        if (column.editor.config && column.editor.config.trueValue) {\n                                            if (checked = !(value == column.editor.config.trueValue)) {\n                                                newValue = column.editor.config.trueValue;\n                                            } else {\n                                                newValue = column.editor.config.falseValue;\n                                            }\n                                        } else {\n                                            newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                                        }\n\n                                        GRID.data.setValue.call(this, _column.dindex, column.key, newValue);\n                                        updateRowState.call(this, [\"cellChecked\"], dindex, {\n                                            key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                                            editorConfig: column.editor.config, checked: checked\n                                        });\n                                    }\n                                }\n                            } else {\n                                GRID.body.inlineEdit.active.call(this, this.focusedColumn, null, value);\n                            }\n                        }\n                    }\n                }\n            };\n\n            if (key in processor) {\n                processor[key].call(this, key, columnKey, _options);\n            }\n        }\n    };\n\n    const getExcelString = function () {\n        let cfg = this.config,\n            list = this.list,\n            bodyRowData = this.bodyRowTable,\n            footSumData = this.footSumTable,\n            bodyGroupingData = this.bodyGroupingTable;\n\n        // body-scroll 의 포지션에 의존적이므로..\n        let getBody = function (_colGroup, _bodyRow, _groupRow, _list) {\n            let SS = [],\n                di, dl,\n                tri, trl,\n                ci, cl,\n                col;\n\n            //SS.push('<table border=\"1\">');\n            for (di = 0, dl = _list.length; di < dl; di++) {\n                let isGroupingRow = false, rowTable;\n\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\n                    rowTable = _groupRow;\n                    isGroupingRow = true;\n                } else {\n                    rowTable = _bodyRow;\n                }\n\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                    SS.push('\\n<tr>');\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n\n                        SS.push('<td ',\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            '>', (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col, undefined, \"text\"), '&nbsp;</td>');\n                    }\n                    SS.push('\\n</tr>');\n                }\n            }\n            //SS.push('</table>');\n            return SS.join('');\n        };\n        let getSum = function (_colGroup, _bodyRow, _list) {\n            let SS = [],\n                tri, trl,\n                ci, cl,\n                col;\n\n            //SS.push('<table border=\"1\">');\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('\\n<tr>');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    SS.push('<td ',\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        '>', getSumFieldValue.call(this, _list, col), '</td>');\n                }\n                SS.push('\\n</tr>');\n            }\n            //SS.push('</table>');\n\n            return SS.join('');\n        };\n\n        let po = [];\n        po.push(getBody.call(this, this.headerColGroup, bodyRowData, bodyGroupingData, list));\n        if (cfg.footSum) {\n            // 바닥 요약\n            po.push(getSum.call(this, this.headerColGroup, footSumData, list));\n        }\n\n        // right\n        if (cfg.rightSum) {\n            // todo : right 표현 정리\n        }\n\n        return po.join('');\n    };\n\n    GRID.body = {\n        init: init,\n        repaint: repaint,\n        repaintCell: repaintCell,\n        repaintRow: repaintRow,\n        updateRowState: updateRowState,\n        updateRowStateAll: updateRowStateAll,\n        scrollTo: scrollTo,\n        blur: blur,\n        moveFocus: moveFocus,\n        inlineEdit: inlineEdit,\n        getExcelString: getExcelString\n    };\n})();","// ax5.ui.grid.collector\n(function () {\n\n    let GRID = ax5.ui.grid,\n        U = ax5.util;\n\n    let sum = function () {\n        let value = 0,\n            i = this.list.length;\n        while (i--) {\n            if(!(\"__groupingList\" in this.list[i])) {\n                value += U.number(this.list[i][this.key]);\n            }\n        }\n        return value;\n    };\n    let avg = function () {\n        let value = 0,\n            i = this.list.length, listLength = 0;\n        while (i--) {\n            if(!(\"__groupingList\" in this.list[i])) {\n                value += U.number(this.list[i][this.key]);\n                listLength++;\n            }\n        }\n        return U.number(value / (listLength || 1), {\"round\": 2});\n    };\n\n    GRID.collector = {\n        sum: sum,\n        avg: avg\n    };\n\n})();","// ax5.ui.grid.layout\n(function () {\n\n    let GRID = ax5.ui.grid,\n        U = ax5.util;\n\n    const init = function () {\n\n    };\n\n    const clearGroupingData = function (_list) {\n        let i = 0, l = _list.length, returnList = [];\n        for (; i < l; i++) {\n            if (_list[i] && !_list[i][\"__isGrouping\"]) {\n                if (_list[i][this.config.columnKeys.selected]) {\n                    this.selectedDataIndexs.push(i);\n                }\n                returnList.push(jQuery.extend({}, _list[i]));\n            }\n        }\n        return returnList;\n    };\n\n    const initData = function (_list) {\n        this.selectedDataIndexs = [];\n        let i = 0, l = _list.length,\n            returnList = [],\n            appendIndex = 0,\n            dataRealRowCount = 0;\n\n        if (this.config.body.grouping) {\n            let groupingKeys = U.map(this.bodyGrouping.by, function () {\n                return {\n                    key: this,\n                    compareString: \"\",\n                    grouping: false,\n                    list: []\n                }\n            });\n            let gi = 0, gl = groupingKeys.length, compareString, appendRow = [], ari;\n            for (; i < l + 1; i++) {\n                gi = 0;\n                if (_list[i] && _list[i][this.config.columnKeys.deleted]) {\n                    this.deletedList.push(_list[i]);\n                } else {\n                    compareString = \"\";\n                    appendRow = [];\n                    for (; gi < gl; gi++) {\n                        if (_list[i]) {\n                            compareString += \"$|$\" + _list[i][groupingKeys[gi].key];\n                        }\n                        if (appendIndex > 0 && compareString != groupingKeys[gi].compareString) {\n                            var appendRowItem = {keys: [], labels: [], list: groupingKeys[gi].list};\n                            for (var ki = 0; ki < gi + 1; ki++) {\n                                appendRowItem.keys.push(groupingKeys[ki].key);\n                                appendRowItem.labels.push(_list[i - 1][groupingKeys[ki].key]);\n                            }\n                            appendRow.push(appendRowItem);\n                            groupingKeys[gi].list = [];\n                        }\n                        groupingKeys[gi].list.push(_list[i]);\n                        groupingKeys[gi].compareString = compareString;\n                    }\n\n                    ari = appendRow.length;\n                    while (ari--) {\n                        returnList.push({__isGrouping: true, __groupingList: appendRow[ari].list, __groupingBy: {keys: appendRow[ari].keys, labels: appendRow[ari].labels}});\n                    }\n\n                    if (_list[i]) {\n                        if (_list[i][this.config.columnKeys.selected]) {\n                            this.selectedDataIndexs.push(i);\n                        }\n                        dataRealRowCount = _list[i][\"__index\"] = i;\n                        returnList.push(_list[i]);\n                        appendIndex++;\n                    }\n                }\n            }\n        }\n        else {\n            for (; i < l; i++) {\n                if (_list[i] && _list[i][this.config.columnKeys.deleted]) {\n                    this.deletedList.push(_list[i]);\n                } else if (_list[i]) {\n                    if (_list[i][this.config.columnKeys.selected]) {\n                        this.selectedDataIndexs.push(i);\n                    }\n                    // __index변수를 추가하여 lineNumber 에 출력합니다. (body getFieldValue 에서 출력함)\n                    _list[i][\"__index\"] = i;\n                    dataRealRowCount++;\n                    returnList.push(_list[i]);\n                }\n            }\n        }\n\n        // 원본 데이터의 갯수\n        // grouping은 제외하고 수집됨.\n        this.xvar.dataRealRowCount = dataRealRowCount;\n        return returnList;\n    };\n\n    const arrangeData4tree = function (_list) {\n        let li = _list.length;\n        let keys = this.config.tree.columnKeys;\n        let hashDigit = this.config.tree.hashDigit;\n        let listIndexMap = {};\n        let i = 0, seq = 0;\n\n        while (li--) {\n            delete _list[li][keys.parentHash];\n            delete _list[li][keys.childHash];\n            delete _list[li][keys.childrenLength];\n        }\n\n        /// 루트 아이템 수집\n        i = 0;\n        seq = 0;\n        li = _list.length;\n        for (; i < li; i++) {\n            if (_list[i]) {\n                listIndexMap[_list[i][keys.selfKey]] = i; // 인덱싱\n\n                if (U.number(_list[i][keys.parentKey]) === 0) { // 최상위 아이템인 경우\n                    _list[i][keys.parentKey] = \"0\";\n                    _list[i][keys.children] = [];\n                    _list[i][keys.childrenLength] = 0;\n                    _list[i][keys.parentHash] = U.setDigit(\"0\", hashDigit);\n                    _list[i][keys.childHash] = U.setDigit(\"0\", hashDigit) + \".\" + U.setDigit(seq, hashDigit);\n                    _list[i][keys.hidden] = false;\n\n                    seq++;\n                } else {\n                    _list[i][keys.childrenLength] = 0;\n                }\n            }\n        }\n\n        /// 자식 아이템 수집\n        i = 0;\n        for (; i < li; i++) {\n            let _parent, _parentHash;\n            if (_list[i] && _list[i][keys.parentKey] && typeof _list[i][keys.parentHash] === \"undefined\") {\n\n                if (_parent = _list[listIndexMap[_list[i][keys.parentKey]]]) {\n                    _parentHash = _parent[keys.childHash];\n                    _list[i][keys.children] = [];\n                    _list[i][keys.parentHash] = _parentHash;\n                    _list[i][keys.childHash] = _parentHash + \".\" + U.setDigit(_parent[keys.childrenLength], hashDigit);\n\n                    if (_parent[keys.collapse] || _parent[keys.hidden]) _list[i][keys.hidden] = true;\n                    _parent[keys.childrenLength]++;\n                    _parent[keys.children].push(_list[i][keys.selfKey]);\n                } else {\n                    _list[i][keys.parentKey] = \"0\";\n                    _list[i][keys.children] = [];\n                    _list[i][keys.childrenLength] = 0;\n                    _list[i][keys.parentHash] = U.setDigit(\"0\", hashDigit);\n                    _list[i][keys.childHash] = U.setDigit(\"0\", hashDigit) + \".\" + U.setDigit(seq, hashDigit);\n                    _list[i][keys.hidden] = false;\n\n                    seq++;\n                }\n            }\n        }\n\n        console.log(_list);\n        \n        return _list;\n    };\n\n    const set = function (data) {\n\n        if (U.isArray(data)) {\n\n            this.page = null;\n            if (this.config.tree.use) {\n                this.list = arrangeData4tree.call(this,\n                    (!this.config.remoteSort && Object.keys(this.sortInfo).length) ? sort.call(this, this.sortInfo, data) : data\n                );\n            } else {\n                this.list = initData.call(this,\n                    (!this.config.remoteSort && Object.keys(this.sortInfo).length) ? sort.call(this, this.sortInfo, data) : data\n                );\n            }\n            this.deletedList = [];\n\n        } else if (\"page\" in data) {\n\n            this.page = jQuery.extend({}, data.page);\n            if (this.config.tree.use) {\n                this.list = arrangeData4tree.call(this,\n                    (!this.config.remoteSort && Object.keys(this.sortInfo).length) ? sort.call(this, this.sortInfo, data.list) : data.list\n                );\n            } else {\n                this.list = initData.call(this,\n                    (!this.config.remoteSort && Object.keys(this.sortInfo).length) ? sort.call(this, this.sortInfo, data.list) : data.list\n                );\n            }\n            this.deletedList = [];\n\n        }\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n\n        if (this.config.body.grouping) {\n\n        }\n        return this;\n    };\n\n    const get = function (_type) {\n        return {\n            list: this.list,\n            page: this.page\n        };\n    };\n\n    const getList = function (_type) {\n        let returnList = [];\n        let i = 0, l = this.list.length;\n        switch (_type) {\n            case \"modified\":\n                for (; i < l; i++) {\n                    if (this.list[i] && !this.list[i][\"__isGrouping\"] && this.list[i][this.config.columnKeys.modified]) {\n                        returnList.push(jQuery.extend({}, this.list[i]));\n                    }\n                }\n                break;\n            case \"selected\":\n                for (; i < l; i++) {\n                    if (this.list[i] && !this.list[i][\"__isGrouping\"] && this.list[i][this.config.columnKeys.selected]) {\n                        returnList.push(jQuery.extend({}, this.list[i]));\n                    }\n                }\n                break;\n            case \"deleted\":\n                //_list = GRID.data.clearGroupingData(this.list);\n                returnList = [].concat(this.deletedList);\n                break;\n            default:\n                returnList = GRID.data.clearGroupingData.call(this, this.list);\n        }\n        return returnList;\n    };\n\n    const add = function (_row, _dindex, _options) {\n        let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n        let processor = {\n            \"first\": function () {\n                list = [].concat(_row).concat(list);\n            },\n            \"last\": function () {\n                list = list.concat([].concat(_row));\n            }\n        };\n\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\n        if (_dindex in processor) {\n            _row[this.config.columnKeys.modified] = true;\n            processor[_dindex].call(this, _row);\n        } else {\n            if (!U.isNumber(_dindex)) {\n                throw 'invalid argument _dindex';\n            }\n            //\n            list = list.splice(_dindex, [].concat(_row));\n        }\n\n        if (this.config.body.grouping) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        } else if (_options && _options.sort && Object.keys(this.sortInfo).length) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        } else {\n            list = initData.call(this, list);\n        }\n\n        this.list = list;\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n    /**\n     * list에서 완전 제거 하는 경우 사용.\n     * ax5grid.data.remove\n     */\n    const remove = function (_dindex) {\n        let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n        let processor = {\n            \"first\": function () {\n                list.splice(_dindex, 1);\n            },\n            \"last\": function () {\n                var lastIndex = list.length - 1;\n                list.splice(lastIndex, 1);\n            }\n        };\n\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\n        if (_dindex in processor) {\n            processor[_dindex].call(this, _dindex);\n        } else {\n            if (!U.isNumber(_dindex)) {\n                throw 'invalid argument _dindex';\n            }\n            //\n            list.splice(_dindex, 1);\n        }\n\n        if (this.config.body.grouping) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        } else if (Object.keys(this.sortInfo).length) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        } else {\n            list = initData.call(this, list);\n        }\n\n        this.list = list;\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n\n    /**\n     * list에서 deleted 처리 repaint\n     * ax5grid.data.deleteRow\n     */\n    const deleteRow = function (_dindex) {\n        let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n        let processor = {\n            \"first\": function () {\n                list[0][this.config.columnKeys.deleted] = true;\n            },\n            \"last\": function () {\n                list[list.length - 1][this.config.columnKeys.deleted] = true;\n            },\n            \"selected\": function () {\n                var i = list.length;\n                while (i--) {\n                    if (list[i][this.config.columnKeys.selected]) {\n                        list[i][this.config.columnKeys.deleted] = true;\n                    }\n                }\n            }\n        };\n\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\n        if (_dindex in processor) {\n            processor[_dindex].call(this, _dindex);\n        } else {\n            if (!U.isNumber(_dindex)) {\n                throw 'invalid argument _dindex';\n            }\n            list[_dindex][this.config.columnKeys.deleted] = true;\n        }\n\n        if (this.config.body.grouping) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        } else if (Object.keys(this.sortInfo).length) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        } else {\n            list = initData.call(this, list);\n        }\n\n        this.list = list;\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n    const update = function (_row, _dindex) {\n        if (!U.isNumber(_dindex)) {\n            throw 'invalid argument _dindex';\n        }\n        //\n        this.needToPaintSum = true;\n        this.list.splice(_dindex, 1, _row);\n\n        if (this.config.body.grouping) {\n            this.list = initData.call(this, clearGroupingData.call(this, this.list));\n        }\n    };\n\n    const setValue = function (_dindex, _key, _value) {\n        let originalValue = getValue.call(this, _dindex, _key);\n        this.needToPaintSum = true;\n\n        if (originalValue !== _value) {\n            if (/[\\.\\[\\]]/.test(_key)) {\n                try {\n                    this.list[_dindex][this.config.columnKeys.modified] = true;\n                    (Function(\"val\", \"this\" + GRID.util.getRealPathForDataItem(_key) + \" = val;\")).call(this.list[_dindex], _value);\n                } catch (e) {\n\n                }\n            } else {\n                this.list[_dindex][this.config.columnKeys.modified] = true;\n                this.list[_dindex][_key] = _value;\n            }\n\n            if (this.onDataChanged) {\n                this.onDataChanged.call({\n                    self: this,\n                    list: this.list,\n                    dindex: _dindex,\n                    item: this.list[_dindex],\n                    key: _key,\n                    value: _value\n                });\n            }\n        }\n\n        return true;\n    };\n\n    let getValue = function (_dindex, _key, _value) {\n        if (/[\\.\\[\\]]/.test(_key)) {\n            try {\n                _value = (Function(\"\", \"return this\" + GRID.util.getRealPathForDataItem(_key) + \";\")).call(this.list[_dindex]);\n            } catch (e) {\n\n            }\n        } else {\n            _value = this.list[_dindex][_key];\n        }\n        return _value;\n    };\n\n    const clearSelect = function () {\n        this.selectedDataIndexs = [];\n    };\n\n    const select = function (_dindex, _selected, _options) {\n        let cfg = this.config;\n\n        if (!this.list[_dindex]) return false;\n        if (this.list[_dindex].__isGrouping) return false;\n        if (this.list[_dindex][cfg.columnKeys.disableSelection]) return false;\n\n        if (typeof _selected === \"undefined\") {\n            if (this.list[_dindex][cfg.columnKeys.selected] = !this.list[_dindex][cfg.columnKeys.selected]) {\n                this.selectedDataIndexs.push(_dindex);\n            }\n        } else {\n            if (this.list[_dindex][cfg.columnKeys.selected] = _selected) {\n                this.selectedDataIndexs.push(_dindex);\n            }\n        }\n\n        if (this.onDataChanged && _options && _options.internalCall) {\n            this.onDataChanged.call({\n                self: this,\n                list: this.list,\n                dindex: _dindex,\n                item: this.list[_dindex],\n                key: cfg.columnKeys.selected,\n                value: this.list[_dindex][cfg.columnKeys.selected]\n            });\n        }\n\n        return this.list[_dindex][cfg.columnKeys.selected];\n    };\n\n    const selectAll = function (_selected, _options) {\n        let cfg = this.config,\n            dindex = this.list.length;\n\n        if (typeof _selected === \"undefined\") {\n            while (dindex--) {\n                if (this.list[dindex].__isGrouping) continue;\n                if (_options && _options.filter) {\n                    if (_options.filter.call(this.list[dindex]) !== true) {\n                        continue;\n                    }\n                }\n                if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n                if (this.list[dindex][cfg.columnKeys.selected] = !this.list[dindex][cfg.columnKeys.selected]) {\n                    this.selectedDataIndexs.push(dindex);\n                }\n            }\n        } else {\n            while (dindex--) {\n                if (this.list[dindex].__isGrouping) continue;\n                if (_options && _options.filter) {\n                    if (_options.filter.call(this.list[dindex]) !== true) {\n                        continue;\n                    }\n                }\n                if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n                if (this.list[dindex][cfg.columnKeys.selected] = _selected) {\n                    this.selectedDataIndexs.push(dindex);\n                }\n            }\n        }\n\n        if (this.onDataChanged && _options && _options.internalCall) {\n            this.onDataChanged.call({\n                self: this,\n                list: this.list\n            });\n        }\n\n        return this.list;\n    };\n\n    const sort = function (_sortInfo, _list) {\n        let self = this, list = _list || this.list, sortInfoArray = [];\n        let getKeyValue = function (_item, _key, _value) {\n            if (/[\\.\\[\\]]/.test(_key)) {\n                try {\n                    _value = (Function(\"\", \"return this\" + GRID.util.getRealPathForDataItem(_key) + \";\")).call(_item);\n                } catch (e) {\n                }\n            } else {\n                _value = _item[_key];\n            }\n            return _value;\n        };\n\n        for (let k in _sortInfo) {\n            sortInfoArray[_sortInfo[k].seq] = {key: k, order: _sortInfo[k].orderBy};\n        }\n        sortInfoArray = U.filter(sortInfoArray, function () {\n            return typeof this !== \"undefined\";\n        });\n\n        let i = 0, l = sortInfoArray.length, _a_val, _b_val;\n\n        list.sort(function (_a, _b) {\n            for (i = 0; i < l; i++) {\n                _a_val = getKeyValue(_a, sortInfoArray[i].key);\n                _b_val = getKeyValue(_b, sortInfoArray[i].key);\n\n                if (typeof _a_val !== typeof _b_val) {\n                    _a_val = '' + _a_val;\n                    _b_val = '' + _b_val;\n                }\n                if (_a_val < _b_val) {\n                    return (sortInfoArray[i].order === \"asc\") ? -1 : 1;\n                } else if (_a_val > _b_val) {\n                    return (sortInfoArray[i].order === \"asc\") ? 1 : -1;\n                }\n            }\n        });\n\n        if (_list) {\n            return list;\n        } else {\n            this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n            this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n            GRID.page.navigationUpdate.call(this);\n            return this;\n        }\n    };\n\n    const append = function (_list, _callback) {\n        let self = this;\n        this.list = this.list.concat([].concat(_list));\n\n        this.appendProgress = true;\n        GRID.page.statusUpdate.call(this);\n\n\n        if (this.appendDebouncer) {\n            if (self.appendDebounceTimes < this.config.debounceTime / 10) {\n                clearTimeout(this.appendDebouncer);\n                self.appendDebounceTimes++;\n            } else {\n                self.appendDebounceTimes = 0;\n                appendIdle.call(self);\n                _callback();\n                return false;\n            }\n        }\n\n        this.appendDebouncer = setTimeout(function () {\n            self.appendDebounceTimes = 0;\n            appendIdle.call(self);\n            _callback();\n        }, this.config.debounceTime);\n\n        // todo : append bounce animation\n    };\n\n    const appendIdle = function () {\n        this.appendProgress = false;\n        if (this.config.body.grouping) {\n            this.list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    this.list\n                )\n            );\n        } else {\n            this.list = initData.call(this, this.list);\n        }\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n    };\n\n    GRID.data = {\n        init: init,\n        set: set,\n        get: get,\n        getList: getList,\n        setValue: setValue,\n        getValue: getValue,\n        clearSelect: clearSelect,\n        select: select,\n        selectAll: selectAll,\n        add: add,\n        remove: remove,\n        deleteRow: deleteRow,\n        update: update,\n        sort: sort,\n        initData: initData,\n        clearGroupingData: clearGroupingData,\n        append: append\n    };\n})();","/*\n * Copyright (c) 2016. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n// ax5.ui.grid.excel\n(function () {\n\n    let GRID = ax5.ui.grid,\n        U = ax5.util;\n\n    let base64 = function (s) {\n            return window.btoa(unescape(encodeURIComponent(s)));\n        },\n        uri = \"data:application/vnd.ms-excel;base64,\",\n        getExcelTmpl = function () {\n            return `\\ufeff\n{{#tables}}{{{body}}}{{/tables}}\n`;\n        };\n\n    var tableToExcel = function (table, fileName) {\n        let link, a, output,\n            tables = [].concat(table);\n\n        output = ax5.mustache.render(getExcelTmpl(), {\n            worksheet: (function () {\n                var arr = [];\n                tables.forEach(function (t, ti) {\n                    arr.push({name: \"Sheet\" + (ti + 1)});\n                });\n                return arr;\n            })(),\n            tables: (function () {\n                var arr = [];\n                tables.forEach(function (t, ti) {\n                    arr.push({body: t});\n                });\n                return arr;\n            })()\n        });\n\n        let isChrome = navigator.userAgent.indexOf(\"Chrome\") > -1,\n            isSafari = !isChrome && navigator.userAgent.indexOf(\"Safari\") > -1,\n            isIE = /*@cc_on!@*/false || !!document.documentMode; // this works with IE10 and IE11 both :)\n\n        let blob1, blankWindow, $iframe, iframe, anchor;\n\n        if (navigator.msSaveOrOpenBlob) {\n            blob1 = new Blob([output], {type: \"text/html\"});\n            window.navigator.msSaveOrOpenBlob(blob1, fileName);\n        }\n        else if (isSafari) {\n            // 사파리는 지원이 안되므로 그냥 테이블을 클립보드에 복사처리\n            //tables\n            blankWindow = window.open('about:blank', this.id + '-excel-export', 'width=600,height=400');\n            blankWindow.document.write(output);\n            blankWindow = null;\n        }\n        else {\n            if (isIE && typeof Blob === \"undefined\") {\n                //otherwise use the iframe and save\n                //requires a blank iframe on page called txtArea1\n                $iframe = jQuery('<iframe id=\"' + this.id + '-excel-export\" style=\"display:none\"></iframe>');\n                jQuery(document.body).append($iframe);\n\n                iframe = window[this.id + '-excel-export'];\n                iframe.document.open(\"text/html\", \"replace\");\n                iframe.document.write(output);\n                iframe.document.close();\n                iframe.focus();\n                iframe.document.execCommand(\"SaveAs\", true, fileName);\n                $iframe.remove();\n            } else {\n                // Attempt to use an alternative method\n                anchor = document.body.appendChild(\n                    document.createElement(\"a\")\n                );\n\n                // If the [download] attribute is supported, try to use it\n                if (\"download\" in anchor) {\n                    anchor.download = fileName;\n                    //anchor.href = URL.createObjectURL( blob );\n                    anchor.href = uri + base64(output);\n                    anchor.click();\n                    document.body.removeChild(anchor);\n                }\n            }\n        }\n\n        return true;\n    };\n\n    GRID.excel = {\n        export: tableToExcel\n    };\n})();","// ax5.ui.grid.formatter\n(function () {\n\n    let GRID = ax5.ui.grid,\n        U = ax5.util;\n\n    let money = function () {\n        return U.number(this.value, {\"money\":true});\n    };\n\n    GRID.formatter = {\n        money: money\n    };\n\n})();","// ax5.ui.grid.header\n(function () {\n\n    let GRID = ax5.ui.grid,\n        U = ax5.util;\n\n    var columnResizerEvent = {\n        \"on\": function (_columnResizer, _colIndex) {\n            var self = this;\n            var $columnResizer = $(_columnResizer);\n            var columnResizerPositionLeft = $columnResizer.offset().left;\n            var gridTargetOffsetLeft = self.$[\"container\"][\"root\"].offset().left;\n            self.xvar.columnResizerIndex = _colIndex;\n            var resizeRange = {\n                min: -self.colGroup[_colIndex]._width + 2,\n                max: (self.colGroup[_colIndex + 1]) ? self.colGroup[_colIndex + 1]._width : self.$[\"container\"][\"root\"].width() - 2,\n            };\n            //console.log(resizeRange);\n\n            jQuery(document.body)\n                .bind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                    var mouseObj = GRID.util.getMousePosition(e);\n                    self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n\n                    if (resizeRange.min > self.xvar.__da) {\n                        self.xvar.__da = resizeRange.min;\n                    } else if (resizeRange.max < self.xvar.__da) {\n                        self.xvar.__da = resizeRange.max;\n                    }\n\n                    if (!self.xvar.columnResizerLived) {\n                        self.$[\"resizer\"][\"horizontal\"].addClass(\"live\");\n                    }\n                    self.xvar.columnResizerLived = true;\n                    self.$[\"resizer\"][\"horizontal\"].css({\n                        left: columnResizerPositionLeft + self.xvar.__da - gridTargetOffsetLeft\n                    });\n                })\n                .bind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                    columnResizerEvent.off.call(self);\n                    U.stopEvent(e);\n                })\n                .bind(\"mouseleave.ax5grid-\" + this.instanceId, function (e) {\n                    columnResizerEvent.off.call(self);\n                    U.stopEvent(e);\n                });\n\n            jQuery(document.body)\n                .attr('unselectable', 'on')\n                .css('user-select', 'none')\n                .on('selectstart', false);\n        },\n        \"off\": function () {\n            this.$[\"resizer\"][\"horizontal\"].removeClass(\"live\");\n            this.xvar.columnResizerLived = false;\n\n            if (typeof this.xvar.__da === \"undefined\") {\n\n            }\n            else {\n                this.setColumnWidth(this.colGroup[this.xvar.columnResizerIndex]._width + this.xvar.__da, this.xvar.columnResizerIndex);\n            }\n\n            jQuery(document.body)\n                .unbind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId)\n                .unbind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId)\n                .unbind(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body)\n                .removeAttr('unselectable')\n                .css('user-select', 'auto')\n                .off('selectstart');\n        }\n    };\n\n    var init = function () {\n        // 헤더 초기화\n        var self = this;\n\n        this.$[\"container\"][\"header\"].on(\"click\", '[data-ax5grid-column-attr]', function (e) {\n            let key = this.getAttribute(\"data-ax5grid-column-key\"),\n                colIndex = this.getAttribute(\"data-ax5grid-column-colindex\"),\n                rowIndex = this.getAttribute(\"data-ax5grid-column-rowindex\"),\n                col = self.colGroup[colIndex];\n\n            if (key === \"__checkbox_header__\") {\n                var selected = this.getAttribute(\"data-ax5grid-selected\");\n                selected = (U.isNothing(selected)) ? true : (selected === \"true\") ? false : true;\n\n                $(this).attr(\"data-ax5grid-selected\", selected);\n                self.selectAll({selected: selected});\n            }\n            else {\n                if (key && col) {\n                    if ((col.sortable === true || self.config.sortable === true) && col.sortable !== false) {\n                        if (!col.sortFixed) toggleSort.call(self, col.key);\n                    }\n                }\n            }\n\n            GRID.body.blur.call(self);\n        });\n        this.$[\"container\"][\"header\"]\n            .on(\"mousedown\", '[data-ax5grid-column-resizer]', function (e) {\n                var colIndex = this.getAttribute(\"data-ax5grid-column-resizer\");\n                self.xvar.mousePosition = GRID.util.getMousePosition(e);\n                columnResizerEvent.on.call(self, this, Number(colIndex));\n                U.stopEvent(e);\n            })\n            .on(\"dragstart\", function (e) {\n                U.stopEvent(e);\n                return false;\n            });\n\n        resetFrozenColumn.call(this);\n    };\n\n    var resetFrozenColumn = function () {\n        let cfg = this.config,\n            dividedHeaderObj = GRID.util.divideTableByFrozenColumnIndex(this.headerTable, this.config.frozenColumnIndex);\n        this.asideHeaderData = (function (dataTable) {\n            var colGroup = [];\n            var data = {rows: []};\n            for (var i = 0, l = dataTable.rows.length; i < l; i++) {\n                data.rows[i] = {cols: []};\n                if (i === 0) {\n                    var col = {\n                        label: \"\",\n                        colspan: 1,\n                        rowspan: dataTable.rows.length,\n                        colIndex: null\n                    }, _col = {};\n\n                    if (cfg.showLineNumber) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.lineNumberColumnWidth,\n                            _width: cfg.lineNumberColumnWidth,\n                            columnAttr: \"lineNumber\",\n                            key: \"__index_header__\", label: \"&nbsp;\"\n                        });\n                        colGroup.push(_col);\n                        data.rows[i].cols.push(_col);\n                    }\n                    if (cfg.showRowSelector) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.rowSelectorColumnWidth,\n                            _width: cfg.rowSelectorColumnWidth,\n                            columnAttr: \"rowSelector\",\n                            key: \"__checkbox_header__\", label: \"\"\n                        });\n                        colGroup.push(_col);\n                        data.rows[i].cols.push(_col);\n                    }\n                }\n            }\n\n            this.asideColGroup = colGroup;\n            return data;\n        }).call(this, this.headerTable);\n        this.leftHeaderData = dividedHeaderObj.leftData;\n        this.headerData = dividedHeaderObj.rightData;\n    };\n\n    var getFieldValue = function (_col) {\n        let cfg = this.config,\n            colGroup = this.colGroup,\n            _key = _col.key,\n            tagsToReplace = {\n            '<': '&lt;',\n            '>': '&gt;'\n        };\n\n        if (_key === \"__checkbox_header__\") {\n            return `<div class=\"checkBox\" style=\"max-height: ${_col.width - 10}px;min-height: ${_col.width - 10}px;\"></div>`;\n        } else {\n            return (_col.label || \"&nbsp;\");\n        }\n    };\n\n    var repaint = function (_reset) {\n        let cfg = this.config,\n            colGroup = this.colGroup;\n\n        if (_reset) {\n            resetFrozenColumn.call(this);\n            this.xvar.paintStartRowIndex = undefined;\n        }\n        let asideHeaderData = this.asideHeaderData,\n            leftHeaderData = this.leftHeaderData,\n            headerData = this.headerData,\n            headerAlign = cfg.header.align;\n\n        // this.asideColGroup : asideHeaderData에서 처리 함.\n        this.leftHeaderColGroup = colGroup.slice(0, this.config.frozenColumnIndex);\n        this.headerColGroup = colGroup.slice(this.config.frozenColumnIndex);\n\n        var repaintHeader = function (_elTarget, _colGroup, _bodyRow) {\n            let tableWidth = 0,\n                SS = [];\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (var cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n                tableWidth += _colGroup[cgi]._width;\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (var tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                var trCSS_class = \"\";\n                SS.push('<tr class=\"' + trCSS_class + '\">');\n                for (var ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    var col = _bodyRow.rows[tri].cols[ci];\n                    var cellHeight = cfg.header.columnHeight * col.rowspan - cfg.header.columnBorderWidth;\n                    var colAlign = headerAlign || col.align;\n                    SS.push('<td ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        (function () {\n                            return (typeof col.key !== \"undefined\") ? 'data-ax5grid-column-key=\"' + col.key + '\" ' : '';\n                        })(),\n                        'data-ax5grid-column-colindex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-rowindex=\"' + col.rowIndex + '\" ',\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            var tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.header.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function () {\n                        var lineHeight = (cfg.header.columnHeight - cfg.header.columnPadding * 2 - cfg.header.columnBorderWidth);\n                        return '<span data-ax5grid-cellHolder=\"\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            ' style=\"height: ' + (cfg.header.columnHeight - cfg.header.columnBorderWidth) + 'px;line-height: ' + lineHeight + 'px;\">';\n                    })(), (function () {\n                        var _SS = \"\";\n\n                        if (!U.isNothing(col.key) && !U.isNothing(col.colIndex) && (cfg.sortable === true || col.sortable === true) && col.sortable !== false) {\n                            _SS += '<span data-ax5grid-column-sort=\"' + col.colIndex + '\" data-ax5grid-column-sort-order=\"' + (colGroup[col.colIndex].sort || \"\") + '\" />';\n                        }\n                        return _SS;\n                    })(), getFieldValue.call(this, col), '</span>');\n\n                    if (!U.isNothing(col.colIndex)) {\n                        if (cfg.enableFilter) {\n                            SS.push('<span data-ax5grid-column-filter=\"' + col.colIndex + '\" data-ax5grid-column-filter-value=\"\"  />');\n                        }\n                    }\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'style=\"height: ' + (cfg.header.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n                SS.push('</tr>');\n            }\n            SS.push('</table>');\n            _elTarget.html(SS.join(''));\n\n            /// append column-resizer\n            (function () {\n                let resizerHeight = cfg.header.columnHeight * _bodyRow.rows.length - cfg.header.columnBorderWidth,\n                    resizerLeft = 0,\n                    AS = [];\n\n                for (var cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                    var col = _colGroup[cgi];\n                    if (!U.isNothing(col.colIndex)) {\n                        //_colGroup[cgi]._width\n                        resizerLeft += col._width;\n                        AS.push('<div data-ax5grid-column-resizer=\"' + col.colIndex + '\" style=\"height:' + resizerHeight + 'px;left: ' + (resizerLeft - 4) + 'px;\"  />');\n                    }\n                }\n                _elTarget.append(AS);\n            }).call(this);\n\n\n            return tableWidth;\n        };\n\n        if (cfg.asidePanelWidth > 0) {\n            repaintHeader.call(this, this.$.panel[\"aside-header\"], this.asideColGroup, asideHeaderData);\n        }\n        if (cfg.frozenColumnIndex > 0) {\n            repaintHeader.call(this, this.$.panel[\"left-header\"], this.leftHeaderColGroup, leftHeaderData);\n        }\n        this.xvar.scrollContentWidth = repaintHeader.call(this, this.$.panel[\"header-scroll\"], this.headerColGroup, headerData);\n\n        if (cfg.rightSum) {\n\n        }\n    };\n\n    var scrollTo = function (css) {\n        this.$.panel[\"header-scroll\"].css(css);\n        return this;\n    };\n\n    var toggleSort = function (_key) {\n        let sortOrder = \"\",\n            sortInfo = {},\n            seq = 0;\n\n        for (var k in this.sortInfo) {\n            if (this.sortInfo[k].fixed) {\n                sortInfo[k] = this.sortInfo[k];\n                seq++;\n            }\n        }\n\n        for (var i = 0, l = this.colGroup.length; i < l; i++) {\n            if (this.colGroup[i].key == _key) {\n                if (sortOrder == \"\") {\n                    if (typeof this.colGroup[i].sort === \"undefined\") {\n                        sortOrder = \"desc\";\n                    }\n                    else if (this.colGroup[i].sort === \"desc\") {\n                        sortOrder = \"asc\";\n                    }\n                    else {\n                        sortOrder = undefined;\n                    }\n                }\n                this.colGroup[i].sort = sortOrder;\n            } else if (!this.config.multiSort) {\n                this.colGroup[i].sort = undefined;\n            }\n\n            if (typeof this.colGroup[i].sort !== \"undefined\") {\n                if (!sortInfo[this.colGroup[i].key]) {\n                    sortInfo[this.colGroup[i].key] = {\n                        seq: seq++,\n                        orderBy: this.colGroup[i].sort\n                    };\n                }\n            }\n        }\n\n        this.setColumnSort(sortInfo);\n        return this;\n    };\n\n    var applySortStatus = function (_sortInfo) {\n        for (var i = 0, l = this.colGroup.length; i < l; i++) {\n            for (var _key in _sortInfo) {\n                if (this.colGroup[i].key == _key) {\n                    this.colGroup[i].sort = _sortInfo[_key].orderBy;\n                }\n            }\n        }\n        return this;\n    };\n\n    var select = function (_options) {\n        GRID.data.select.call(this, dindex, _options && _options.selected);\n        GRID.body.updateRowState.call(this, [\"selected\"], dindex);\n    };\n\n    var getExcelString = function () {\n        let cfg = this.config,\n            colGroup = this.colGroup,\n            headerData = this.headerTable,\n            getHeader = function (_colGroup, _bodyRow) {\n                var SS = [];\n                //SS.push('<table border=\"1\">');\n                for (var tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                    SS.push('<tr>');\n                    for (var ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                        var col = _bodyRow.rows[tri].cols[ci];\n                        SS.push('<td ',\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            '>', getFieldValue.call(this, col), '</td>');\n                    }\n                    SS.push('</tr>');\n                }\n                //SS.push('</table>');\n\n                return SS.join('');\n            };\n\n        return getHeader.call(this, colGroup, headerData);\n    };\n\n    GRID.header = {\n        init: init,\n        repaint: repaint,\n        scrollTo: scrollTo,\n        toggleSort: toggleSort,\n        applySortStatus: applySortStatus,\n        getExcelString: getExcelString\n    };\n\n})();","// ax5.ui.grid.inlineEditor\n(function () {\n\n    var GRID = ax5.ui.grid;\n\n    var edit_text = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"text\" value=\"' + _value + '\" >';\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.focus().select();\n        }\n    };\n\n    var edit_money = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"money\" value=\"' + _value + '\" >';\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.data(\"binded-ax5ui\", \"ax5formater\");\n            _$el.ax5formatter({\n                pattern: \"money\"\n            });\n            _$el.focus().select();\n        }\n    };\n\n    var edit_number = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"number\" value=\"' + _value + '\" >';\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.data(\"binded-ax5ui\", \"ax5formater\");\n            _$el.ax5formatter({\n                pattern: \"number\"\n            });\n            _$el.focus().select();\n        }\n    };\n\n    var edit_date = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"calendar\" value=\"' + _value + '\" >';\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            var self = _root;\n            _$el.data(\"binded-ax5ui\", \"ax5picker\");\n            _$el.ax5picker({\n                direction: \"auto\",\n                content: {\n                    type: 'date',\n                    formatter: {\n                        pattern: 'date'\n                    }\n                },\n                onStateChanged: function () {\n                    if (this.state == \"open\") {\n                        this.self.activePicker.attr(\"data-ax5grid-inline-edit-picker\", \"date\");\n                    } else if (this.state == \"close\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"RETURN\", _columnKey);\n                    }\n                }\n            });\n            _$el.focus().select();\n        }\n    };\n\n    var edit_select = {\n        useReturnToSave: false,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            var po = [];\n            po.push('<div data-ax5select=\"ax5grid-editor\" data-ax5select-config=\"{}\">');\n            po.push('</div>');\n\n            return po.join('');\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            var eConfig = {\n                columnKeys: {\n                    optionValue: \"value\",\n                    optionText: \"text\",\n                    optionSelected: \"selected\"\n                }\n            };\n            jQuery.extend(true, eConfig, _editor.config);\n\n            eConfig.options.forEach(function (n) {\n                if (n[eConfig.columnKeys.optionValue] == _value) n[eConfig.columnKeys.optionSelected] = true;\n            });\n\n            var self = _root;\n            _$el.data(\"binded-ax5ui\", \"ax5select\");\n            _$el.ax5select({\n                direction: \"auto\",\n                columnKeys: eConfig.columnKeys,\n                options: eConfig.options,\n                onStateChanged: function () {\n                    if (this.state == \"open\") {\n                        this.self.activeSelectOptionGroup.attr(\"data-ax5grid-inline-edit-picker\", \"select\");\n                    } else if (this.state == \"changeValue\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"RETURN\", _columnKey, this.value[0][eConfig.columnKeys.optionValue]);\n                    } else if (this.state == \"close\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"ESC\", _columnKey);\n                    }\n                }\n            });\n            _$el.ax5select(\"open\");\n            _$el.ax5select(\"setValue\", _value);\n            _$el.find(\"a\").focus();\n        }\n    };\n\n    var edit_checkbox = {\n        editMode: \"inline\",\n        getHtml: function (_root, _editor, _value) {\n\n            var lineHeight = (_root.config.body.columnHeight - _root.config.body.columnPadding * 2 - _root.config.body.columnBorderWidth);\n            var checked;\n            if (_editor.config && _editor.config.trueValue) {\n                checked = (_value == _editor.config.trueValue) ? \"true\" : \"false\";\n            } else {\n                checked = (_value == false || _value == \"false\" || _value < \"1\") ? \"false\" : \"true\";\n            }\n\n            var eConfig = {\n                marginTop: 2,\n                height: lineHeight - 4\n            };\n            jQuery.extend(true, eConfig, _editor.config);\n            eConfig.marginTop = (lineHeight - eConfig.height) / 2;\n\n            return '<div data-ax5grid-editor=\"checkbox\" data-ax5grid-checked=\"' + checked + '\" style=\"height:' + eConfig.height + 'px;width:' + eConfig.height + 'px;margin-top:' + eConfig.marginTop + 'px;\"></div>';\n        }\n    };\n\n    GRID.inlineEditor = {\n        \"text\": edit_text,\n        \"money\": edit_money,\n        \"number\": edit_number,\n        \"date\": edit_date,\n        \"select\": edit_select,\n        \"checkbox\": edit_checkbox\n    };\n\n})();","// ax5.ui.grid.page\n(function () {\n\n    let GRID = ax5.ui.grid,\n        U = ax5.util;\n\n    var onclickPageMove = function (_act) {\n        var callback = function (_pageNo) {\n            if (this.page.currentPage != _pageNo) {\n                this.page.selectPage = _pageNo;\n                if (this.config.page.onChange) {\n                    this.config.page.onChange.call({\n                        self: this,\n                        page: this.page,\n                        data: this.data\n                    });\n                }\n            }\n        };\n        var processor = {\n            \"first\": function () {\n                callback.call(this, 0);\n            },\n            \"prev\": function () {\n                var pageNo = this.page.currentPage - 1;\n                if (pageNo < 0) pageNo = 0;\n                callback.call(this, pageNo);\n            },\n            \"next\": function () {\n                var pageNo = this.page.currentPage + 1;\n                if (pageNo > this.page.totalPages - 1) pageNo = this.page.totalPages - 1;\n                callback.call(this, pageNo);\n            },\n            \"last\": function () {\n                callback.call(this, this.page.totalPages - 1);\n            }\n        };\n\n        if (_act in processor) {\n            processor[_act].call(this);\n        }\n        else {\n            callback.call(this, _act-1);\n        }\n    };\n\n    var navigationUpdate = function () {\n        var self = this;\n        if (this.page) {\n            var page = {\n                hasPage: false,\n                currentPage: this.page.currentPage,\n                pageSize: this.page.pageSize,\n                totalElements: this.page.totalElements,\n                totalPages: this.page.totalPages,\n                firstIcon: this.config.page.firstIcon,\n                prevIcon: this.config.page.prevIcon || \"«\",\n                nextIcon: this.config.page.nextIcon || \"»\",\n                lastIcon: this.config.page.lastIcon,\n            };\n            var navigationItemCount = this.config.page.navigationItemCount;\n\n\n            page[\"@paging\"] = (function () {\n                var returns = [];\n\n                var startI = page.currentPage - Math.floor(navigationItemCount / 2);\n                if (startI < 0) startI = 0;\n                var endI = page.currentPage + navigationItemCount;\n                if (endI > page.totalPages) endI = page.totalPages;\n\n                if (endI - startI > navigationItemCount) {\n                    endI = startI + navigationItemCount;\n                }\n\n                if(endI - startI < navigationItemCount){\n                    startI = endI - navigationItemCount;\n                }\n                if (startI < 0) startI = 0;\n\n                for (var p = startI, l = endI; p < l; p++) {\n                    returns.push({'pageNo': (p + 1), 'selected': page.currentPage == p});\n                }\n                return returns;\n            })();\n\n            if(page[\"@paging\"].length > 0){\n                page.hasPage = true;\n            }\n\n            this.$[\"page\"][\"navigation\"].html(GRID.tmpl.get(\"page_navigation\", page));\n            this.$[\"page\"][\"navigation\"].find(\"[data-ax5grid-page-move]\").on(\"click\", function () {\n                var act = this.getAttribute(\"data-ax5grid-page-move\");\n                onclickPageMove.call(self, act);\n            });\n        } else {\n            this.$[\"page\"][\"navigation\"].empty();\n        }\n    };\n\n    var statusUpdate = function () {\n        var fromRowIndex = this.xvar.paintStartRowIndex;\n        var toRowIndex = this.xvar.paintStartRowIndex + this.xvar.paintRowCount - 1;\n        //var totalElements = (this.page && this.page.totalElements) ? this.page.totalElements : this.xvar.dataRowCount;\n        var totalElements = this.xvar.dataRowCount;\n        if (toRowIndex > totalElements) {\n            toRowIndex = totalElements;\n        }\n\n        this.$[\"page\"][\"status\"].html(GRID.tmpl.get(\"page_status\", {\n            fromRowIndex: U.number(fromRowIndex + 1, {\"money\": true}),\n            toRowIndex: U.number(toRowIndex, {\"money\": true}),\n            totalElements: U.number(totalElements, {\"money\": true}),\n            dataRowCount: (totalElements !== this.xvar.dataRealRowCount) ? U.number(this.xvar.dataRealRowCount, {\"money\": true}) : false,\n            progress: (this.appendProgress) ? this.config.appendProgressIcon : \"\"\n        }));\n    };\n\n    GRID.page = {\n        navigationUpdate: navigationUpdate,\n        statusUpdate: statusUpdate\n    };\n\n})();","// ax5.ui.grid.scroller\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n\n    var convertScrollPosition = {\n        \"vertical\": function (css, _var) {\n            var _content_height = _var._content_height - _var._panel_height;\n            var _scroller_height = _var._vertical_scroller_height - _var.verticalScrollBarHeight;\n            var top = (_content_height * css.top) / _scroller_height;\n            if (top < 0) top = 0;\n            else if (_content_height < top) {\n                top = _content_height;\n            }\n            return {\n                top: -top\n            }\n        },\n        \"horizontal\": function (css, _var) {\n            var _content_width = _var._content_width - _var._panel_width;\n            var _scroller_width = _var._horizontal_scroller_width - _var.horizontalScrollBarWidth;\n            var left = (_content_width * css.left) / _scroller_width;\n            if (left < 0) left = 0;\n            else if (_content_width < left) {\n                left = _content_width;\n            }\n            return {\n                left: -left\n            }\n        }\n    };\n    var convertScrollBarPosition = {\n        \"vertical\": function (_top, _var) {\n\n            var type = \"vertical\";\n            var _content_height = _var._content_height - _var._panel_height;\n            var _scroller_height = _var._vertical_scroller_height - _var.verticalScrollBarHeight;\n            var top = (_scroller_height * _top) / _content_height;\n\n            if (-top > _scroller_height) {\n                top = -_scroller_height;\n\n                var scrollPositon = convertScrollPosition[type].call(this, {top: -top}, {\n                    _content_width: _var._content_width,\n                    _content_height: _var._content_height,\n                    _panel_width: _var._panel_width,\n                    _panel_height: _var._panel_height,\n                    _horizontal_scroller_width: _var._horizontal_scroller_width,\n                    _vertical_scroller_height: _var._vertical_scroller_height,\n                    verticalScrollBarHeight: _var.verticalScrollBarHeight,\n                    horizontalScrollBarWidth: _var.horizontalScrollBarWidth\n                });\n\n                GRID.body.scrollTo.call(this, scrollPositon);\n            }\n\n            return -top\n        },\n        \"horizontal\": function (_left, _var) {\n            var type = \"horizontal\";\n            var _content_width = _var._content_width - _var._panel_width;\n            var _scroller_width = _var._horizontal_scroller_width - _var.horizontalScrollBarWidth;\n            var left = (_scroller_width * _left) / _content_width;\n\n            if (-left > _scroller_width) {\n                left = -_scroller_width;\n                var scrollPositon = convertScrollPosition[type].call(this, {left: -left}, {\n                    _content_width: _var._content_width,\n                    _content_height: _var._content_height,\n                    _panel_width: _var._panel_width,\n                    _panel_height: _var._panel_height,\n                    _horizontal_scroller_width: _var._horizontal_scroller_width,\n                    _vertical_scroller_height: _var._vertical_scroller_height,\n                    verticalScrollBarHeight: _var.verticalScrollBarHeight,\n                    horizontalScrollBarWidth: _var.horizontalScrollBarWidth\n                });\n\n                GRID.header.scrollTo.call(this, scrollPositon);\n                GRID.body.scrollTo.call(this, scrollPositon);\n            }\n\n            return -left\n        }\n    };\n    var scrollBarMover = {\n        \"click\": function (track, bar, type, e) {\n\n            // 마우스 무브 완료 타임과 클릭타임 차이가 20 보다 작으면 클릭이벤트 막기.\n            if ((new Date()).getTime() - GRID.scroller.moveout_timer < 20) {\n                return false;\n            }\n\n            var self = this,\n                trackOffset = track.offset(),\n                barBox = {\n                    width: bar.outerWidth(), height: bar.outerHeight()\n                },\n                trackBox = {\n                    width: track.innerWidth(), height: track.innerHeight()\n                },\n                _vertical_scroller_height = self.$[\"scroller\"][\"vertical\"].innerHeight(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _horizontal_scroller_width = self.$[\"scroller\"][\"horizontal\"].innerWidth(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                verticalScrollBarHeight = self.$[\"scroller\"][\"vertical-bar\"].outerHeight(),\n                horizontalScrollBarWidth = self.$[\"scroller\"][\"horizontal-bar\"].outerWidth(),\n                getScrollerPosition = {\n                    \"vertical\": function (e) {\n                        var mouseObj = GRID.util.getMousePosition(e);\n                        // track을 벗어 나지 안도록 범위 체크\n                        var newTop = mouseObj.clientY - trackOffset.top;\n                        if (newTop < 0) {\n                            newTop = 0;\n                        }\n                        else if ((newTop + barBox.height) > trackBox.height) {\n                            newTop = trackBox.height - barBox.height;\n                        }\n                        return {top: newTop};\n                    },\n                    \"horizontal\": function (e) {\n                        var mouseObj = GRID.util.getMousePosition(e);\n                        // track을 벗어 나지 안도록 범위 체크\n                        var newLeft = mouseObj.clientX - trackOffset.left;\n                        if (newLeft < 0) {\n                            newLeft = 0;\n                        }\n                        else if ((newLeft + barBox.width) > trackBox.width) {\n                            newLeft = trackBox.width - barBox.width;\n                        }\n                        return {left: newLeft};\n                    }\n                };\n\n            var css = getScrollerPosition[type](e);\n            bar.css(css);\n\n            var scrollPositon = convertScrollPosition[type].call(self, css, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            });\n            if (type === \"horizontal\") GRID.header.scrollTo.call(self, scrollPositon);\n            GRID.body.scrollTo.call(self, scrollPositon);\n        },\n        \"on\": function (track, bar, type, e) {\n            var self = this,\n                barOffset = bar.position(),\n                barBox = {\n                    width: bar.outerWidth(), height: bar.outerHeight()\n                },\n                trackBox = {\n                    width: track.innerWidth(), height: track.innerHeight()\n                },\n\n                _vertical_scroller_height = self.$[\"scroller\"][\"vertical\"].innerHeight(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _horizontal_scroller_width = self.$[\"scroller\"][\"horizontal\"].innerWidth(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                verticalScrollBarHeight = self.$[\"scroller\"][\"vertical-bar\"].outerHeight(),\n                horizontalScrollBarWidth = self.$[\"scroller\"][\"horizontal-bar\"].outerWidth(),\n\n                getScrollerPosition = {\n                    \"vertical\": function (e) {\n                        var mouseObj = GRID.util.getMousePosition(e);\n                        self.xvar.__da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n                        // track을 벗어 나지 안도록 범위 체크\n                        var newTop = barOffset.top + self.xvar.__da;\n                        if (newTop < 0) {\n                            newTop = 0;\n                        }\n                        else if ((newTop + barBox.height) > trackBox.height) {\n                            newTop = trackBox.height - barBox.height;\n                        }\n                        return {top: newTop};\n                    },\n                    \"horizontal\": function (e) {\n                        var mouseObj = GRID.util.getMousePosition(e);\n                        self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                        // track을 벗어 나지 안도록 범위 체크\n                        var newLeft = barOffset.left + self.xvar.__da;\n                        if (newLeft < 0) {\n                            newLeft = 0;\n                        }\n                        else if ((newLeft + barBox.width) > trackBox.width) {\n                            newLeft = trackBox.width - barBox.width;\n                        }\n                        return {left: newLeft};\n                    }\n                };\n\n            self.xvar.__da = 0; // 이동량 변수 초기화 (계산이 잘못 될까바)\n\n            jQuery(document.body)\n                .bind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                    var css = getScrollerPosition[type](e);\n                    bar.css(css);\n\n                    var scrollPositon = convertScrollPosition[type].call(self, css, {\n                        _content_width: _content_width,\n                        _content_height: _content_height,\n                        _panel_width: _panel_width,\n                        _panel_height: _panel_height,\n                        _horizontal_scroller_width: _horizontal_scroller_width,\n                        _vertical_scroller_height: _vertical_scroller_height,\n                        verticalScrollBarHeight: verticalScrollBarHeight,\n                        horizontalScrollBarWidth: horizontalScrollBarWidth\n                    });\n\n                    if (type === \"horizontal\") GRID.header.scrollTo.call(self, scrollPositon);\n                    GRID.body.scrollTo.call(self, scrollPositon);\n                })\n                .bind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                    scrollBarMover.off.call(self);\n                })\n                .bind(\"mouseleave.ax5grid-\" + this.instanceId, function (e) {\n                    scrollBarMover.off.call(self);\n                });\n\n            jQuery(document.body)\n                .attr('unselectable', 'on')\n                .css('user-select', 'none')\n                .on('selectstart', false);\n        },\n        \"off\": function () {\n\n            GRID.scroller.moveout_timer = (new Date()).getTime();\n\n            jQuery(document.body)\n                .unbind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId)\n                .unbind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId)\n                .unbind(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body)\n                .removeAttr('unselectable')\n                .css('user-select', 'auto')\n                .off('selectstart');\n        }\n    };\n    var scrollContentMover = {\n        \"wheel\": function (delta) {\n            let self = this,\n                _body_scroll_position = self.$[\"panel\"][\"body-scroll\"].position(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth;\n\n            if (isNaN(_content_height) || isNaN(_content_width)) {\n                return false;\n            }\n\n            let newLeft, newTop,\n                _top_is_end = false,\n                _left_is_end = false;\n\n            newLeft = _body_scroll_position.left - delta.x;\n            newTop = _body_scroll_position.top - delta.y;\n\n            // newTop이 범위를 넘었는지 체크\n            if (newTop >= 0) {\n                newTop = 0;\n                _top_is_end = true;\n            } else if (newTop <= _panel_height - _content_height) {\n                newTop = _panel_height - _content_height;\n                if (newTop >= 0) newTop = 0;\n                _top_is_end = true;\n            } else {\n                if (delta.y == 0) _top_is_end = true;\n            }\n\n\n            // newLeft이 범위를 넘었는지 체크\n            if (newLeft >= 0) {\n                newLeft = 0;\n                _left_is_end = true;\n            } else if (newLeft <= _panel_width - _content_width) {\n                newLeft = _panel_width - _content_width;\n                if (newLeft >= 0) newLeft = 0;\n                _left_is_end = true;\n            } else {\n                if (delta.x == 0) _left_is_end = true;\n            }\n\n            //self.$[\"panel\"][\"body-scroll\"].css({left: newLeft, top: newTop});\n            GRID.header.scrollTo.call(this, {left: newLeft});\n            GRID.body.scrollTo.call(this, {left: newLeft, top: newTop});\n            resize.call(this);\n\n            return !_top_is_end || !_left_is_end;\n        },\n        \"on\": function () {\n            let self = this,\n                _body_scroll_position = self.$[\"panel\"][\"body-scroll\"].position(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                getContentPosition = function (e) {\n                    let mouseObj = GRID.util.getMousePosition(e), newLeft, newTop;\n\n                    self.xvar.__x_da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                    self.xvar.__y_da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n\n                    newLeft = _body_scroll_position.left + self.xvar.__x_da;\n                    newTop = _body_scroll_position.top + self.xvar.__y_da;\n\n                    // newTop이 범위를 넘었는지 체크\n                    if (newTop >= 0) {\n                        newTop = 0;\n                    } else if (newTop <= _panel_height - _content_height) {\n                        newTop = _panel_height - _content_height;\n                        if (newTop >= 0) newTop = 0;\n                    }\n\n                    // newLeft이 범위를 넘었는지 체크\n                    if (newLeft >= 0) {\n                        newLeft = 0;\n                    } else if (newLeft <= _panel_width - _content_width) {\n                        newLeft = _panel_width - _content_width;\n                        if (newLeft >= 0) newLeft = 0;\n                    }\n\n                    return {\n                        left: newLeft, top: newTop\n                    }\n                };\n\n\n            this.xvar.__x_da = 0; // 이동량 변수 초기화 (계산이 잘못 될까바)\n            this.xvar.__y_da = 0; // 이동량 변수 초기화 (계산이 잘못 될까바)\n            this.xvar.touchmoved = false;\n\n            jQuery(document.body)\n                .on(\"touchmove\" + \".ax5grid-\" + this.instanceId, function (e) {\n                    let css = getContentPosition(e);\n                    GRID.header.scrollTo.call(self, {left: css.left});\n                    GRID.body.scrollTo.call(self, css, \"noRepaint\");\n                    resize.call(self);\n                    U.stopEvent(e.originalEvent);\n                    self.xvar.touchmoved = true;\n                })\n                .on(\"touchend\" + \".ax5grid-\" + this.instanceId, function (e) {\n                    if(self.xvar.touchmoved) {\n                        let css = getContentPosition(e);\n                        GRID.header.scrollTo.call(self, {left: css.left});\n                        GRID.body.scrollTo.call(self, css);\n                        resize.call(self);\n                        U.stopEvent(e.originalEvent);\n                        scrollContentMover.off.call(self);\n                    }\n                });\n\n            jQuery(document.body)\n                .attr('unselectable', 'on')\n                .css('user-select', 'none')\n                .on('selectstart', false);\n        },\n        \"off\": function () {\n\n            jQuery(document.body)\n                .off(\"touchmove\" + \".ax5grid-\" + this.instanceId)\n                .off(\"touchend\" + \".ax5grid-\" + this.instanceId);\n\n            jQuery(document.body)\n                .removeAttr('unselectable')\n                .css('user-select', 'auto')\n                .off('selectstart');\n        }\n    };\n\n    var init = function () {\n        let self = this,\n            margin = this.config.scroller.trackPadding;\n\n        if (margin == 0) {\n            this.$[\"scroller\"][\"vertical-bar\"].css({width: this.config.scroller.size, left: -1});\n            this.$[\"scroller\"][\"horizontal-bar\"].css({height: this.config.scroller.size, top: -1});\n        } else {\n            this.$[\"scroller\"][\"vertical-bar\"].css({width: this.config.scroller.size - (margin + 1), left: margin / 2});\n            this.$[\"scroller\"][\"horizontal-bar\"].css({height: this.config.scroller.size - (margin + 1), top: margin / 2});\n        }\n\n        this.$[\"scroller\"][\"vertical-bar\"]\n            .on(GRID.util.ENM[\"mousedown\"], (function (e) {\n                this.xvar.mousePosition = GRID.util.getMousePosition(e);\n                scrollBarMover.on.call(this, this.$[\"scroller\"][\"vertical\"], this.$[\"scroller\"][\"vertical-bar\"], \"vertical\", e);\n            }).bind(this))\n            .on(\"dragstart\", function (e) {\n                U.stopEvent(e);\n                return false;\n            });\n\n        this.$[\"scroller\"][\"vertical\"]\n            .on(\"click\", (function (e) {\n                if (e.target.getAttribute(\"data-ax5grid-scroller\") == \"vertical\") {\n                    scrollBarMover.click.call(this, this.$[\"scroller\"][\"vertical\"], this.$[\"scroller\"][\"vertical-bar\"], \"vertical\", e);\n                }\n            }).bind(this));\n\n        this.$[\"scroller\"][\"horizontal-bar\"]\n            .on(GRID.util.ENM[\"mousedown\"], (function (e) {\n                this.xvar.mousePosition = GRID.util.getMousePosition(e);\n                scrollBarMover.on.call(this, this.$[\"scroller\"][\"horizontal\"], this.$[\"scroller\"][\"horizontal-bar\"], \"horizontal\", e);\n            }).bind(this))\n            .on(\"dragstart\", function (e) {\n                U.stopEvent(e);\n                return false;\n            });\n\n        this.$[\"scroller\"][\"horizontal\"]\n            .on(\"click\", (function (e) {\n                if (e.target.getAttribute(\"data-ax5grid-scroller\") == \"horizontal\") {\n                    scrollBarMover.click.call(this, this.$[\"scroller\"][\"horizontal\"], this.$[\"scroller\"][\"horizontal-bar\"], \"horizontal\", e);\n                }\n            }).bind(this));\n\n        this.$[\"container\"][\"body\"].on('mousewheel DOMMouseScroll', (function (e) {\n            let E = e.originalEvent, delta = {x: 0, y: 0};\n\n            if (E.detail) {\n                delta.y = E.detail * 10;\n            } else {\n                if (typeof E.deltaY === \"undefined\") {\n                    delta.y = -E.wheelDelta;\n                    delta.x = 0;\n                } else {\n                    delta.y = E.deltaY;\n                    delta.x = E.deltaX;\n                }\n            }\n\n            if (scrollContentMover.wheel.call(this, delta)) {\n                U.stopEvent(e);\n            }\n        }).bind(this));\n\n        if (ax5.info.supportTouch) {\n            this.$[\"container\"][\"body\"]\n                .on(\"touchstart\", '[data-ax5grid-panel]', function (e) {\n                    self.xvar.mousePosition = GRID.util.getMousePosition(e);\n                    scrollContentMover.on.call(self);\n                });\n        }\n    };\n\n    var resize = function () {\n        var _vertical_scroller_height = this.$[\"scroller\"][\"vertical\"].height(),\n            _horizontal_scroller_width = this.$[\"scroller\"][\"horizontal\"].width(),\n            _panel_height = this.$[\"panel\"][\"body\"].height(),\n            _panel_width = this.$[\"panel\"][\"body\"].width(),\n            _content_height = this.xvar.scrollContentHeight,\n            _content_width = this.xvar.scrollContentWidth,\n            verticalScrollBarHeight = _panel_height * _vertical_scroller_height / _content_height,\n            horizontalScrollBarWidth = _panel_width * _horizontal_scroller_width / _content_width;\n\n        if (verticalScrollBarHeight < this.config.scroller.barMinSize) verticalScrollBarHeight = this.config.scroller.barMinSize;\n        if (horizontalScrollBarWidth < this.config.scroller.barMinSize) horizontalScrollBarWidth = this.config.scroller.barMinSize;\n\n        this.$[\"scroller\"][\"vertical-bar\"].css({\n            top: convertScrollBarPosition.vertical.call(this, this.$.panel[\"body-scroll\"].position().top, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            }),\n            height: verticalScrollBarHeight\n        });\n\n        this.$[\"scroller\"][\"horizontal-bar\"].css({\n            left: convertScrollBarPosition.horizontal.call(this, this.$.panel[\"body-scroll\"].position().left, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            }),\n            width: horizontalScrollBarWidth\n        });\n\n        _vertical_scroller_height = null;\n        _horizontal_scroller_width = null;\n        _panel_height = null;\n        _panel_width = null;\n        _content_height = null;\n        _content_width = null;\n        verticalScrollBarHeight = null;\n        horizontalScrollBarWidth = null;\n    };\n\n    GRID.scroller = {\n        // 타이머\n        moveout_timer: (new Date()).getTime(),\n        init: init,\n        resize: resize\n    };\n\n})();","// ax5.ui.grid.tmpl\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var main = function () {\n        return `<div data-ax5grid-container=\"root\" data-ax5grid-instance=\"{{instanceId}}\">\n            <div data-ax5grid-container=\"hidden\">\n                <textarea data-ax5grid-form=\"clipboard\"></textarea>\n            </div>\n            <div data-ax5grid-container=\"header\">\n                <div data-ax5grid-panel=\"aside-header\"></div>\n                <div data-ax5grid-panel=\"left-header\"></div>\n                <div data-ax5grid-panel=\"header\">\n                    <div data-ax5grid-panel-scroll=\"header\"></div>\n                </div>\n                <div data-ax5grid-panel=\"right-header\"></div>\n            </div>\n            <div data-ax5grid-container=\"body\">\n                <div data-ax5grid-panel=\"top-aside-body\"></div>\n                <div data-ax5grid-panel=\"top-left-body\"></div>\n                <div data-ax5grid-panel=\"top-body\">\n                    <div data-ax5grid-panel-scroll=\"top-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"top-right-body\"></div>\n                <div data-ax5grid-panel=\"aside-body\">\n                    <div data-ax5grid-panel-scroll=\"aside-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"left-body\">\n                    <div data-ax5grid-panel-scroll=\"left-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"body\">\n                    <div data-ax5grid-panel-scroll=\"body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"right-body\">\n                  <div data-ax5grid-panel-scroll=\"right-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"bottom-aside-body\"></div>\n                <div data-ax5grid-panel=\"bottom-left-body\"></div>\n                <div data-ax5grid-panel=\"bottom-body\">\n                    <div data-ax5grid-panel-scroll=\"bottom-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"bottom-right-body\"></div>\n            </div>\n            <div data-ax5grid-container=\"page\">\n                <div data-ax5grid-page=\"holder\">\n                    <div data-ax5grid-page=\"navigation\"></div>\n                    <div data-ax5grid-page=\"status\"></div>\n                </div>\n            </div>\n            <div data-ax5grid-container=\"scroller\">\n                <div data-ax5grid-scroller=\"vertical\">\n                    <div data-ax5grid-scroller=\"vertical-bar\"></div>    \n                </div>\n                <div data-ax5grid-scroller=\"horizontal\">\n                    <div data-ax5grid-scroller=\"horizontal-bar\"></div>\n                </div>\n                <div data-ax5grid-scroller=\"corner\"></div>\n            </div>\n            <div data-ax5grid-resizer=\"vertical\"></div>\n            <div data-ax5grid-resizer=\"horizontal\"></div>\n        </div>`;\n    };\n\n\n    var page_navigation = function(){\n        return `<div data-ax5grid-page-navigation=\"holder\">\n            {{#hasPage}}\n            <div data-ax5grid-page-navigation=\"cell\">    \n                {{#firstIcon}}<button data-ax5grid-page-move=\"first\">{{{firstIcon}}}</button>{{/firstIcon}}\n                <button data-ax5grid-page-move=\"prev\">{{{prevIcon}}}</button>\n            </div>\n            <div data-ax5grid-page-navigation=\"cell-paging\">\n                {{#@paging}}\n                <button data-ax5grid-page-move=\"{{pageNo}}\" data-ax5grid-page-selected=\"{{selected}}\">{{pageNo}}</button>\n                {{/@paging}}\n            </div>\n            <div data-ax5grid-page-navigation=\"cell\">\n                <button data-ax5grid-page-move=\"next\">{{{nextIcon}}}</button>\n                {{#lastIcon}}<button data-ax5grid-page-move=\"last\">{{{lastIcon}}}</button>{{/lastIcon}}\n            </div>\n            {{/hasPage}}\n        </div>`;\n    };\n\n\n    var page_status = function(){\n        return `<span>{{{progress}}} {{fromRowIndex}} - {{toRowIndex}} of {{totalElements}}{{#dataRowCount}} ({{dataRowCount}}){{/dataRowCount}}</span>`;\n    };\n\n\n    GRID.tmpl = {\n        \"main\": main,\n        \"page_navigation\": page_navigation,\n        \"page_status\": page_status,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(GRID.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();","// ax5.ui.grid.util\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n\n\n    /**\n     * @method ax5grid.util.divideTableByFrozenColumnIndex\n     * @param _table\n     * @param _frozenColumnIndex\n     * @returns {{leftHeaderData: {rows: Array}, headerData: {rows: Array}}}\n     */\n    var divideTableByFrozenColumnIndex = function (_table, _frozenColumnIndex) {\n        var tempTable_l = {rows: []};\n        var tempTable_r = {rows: []};\n        for (var r = 0, rl = _table.rows.length; r < rl; r++) {\n            var row = _table.rows[r];\n\n            tempTable_l.rows[r] = {cols: []};\n            tempTable_r.rows[r] = {cols: []};\n\n            for (var c = 0, cl = row.cols.length; c < cl; c++) {\n                var col = jQuery.extend({}, row.cols[c]);\n                var colStartIndex = col.colIndex, colEndIndex = col.colIndex + col.colspan;\n\n                if (colStartIndex < _frozenColumnIndex) {\n                    if (colEndIndex <= _frozenColumnIndex) {\n                        // 좌측편에 변형없이 추가\n                        tempTable_l.rows[r].cols.push(col);\n                    } else {\n                        var leftCol = jQuery.extend({}, col);\n                        var rightCol = jQuery.extend({}, leftCol);\n                        leftCol.colspan = _frozenColumnIndex - leftCol.colIndex;\n                        rightCol.colIndex = _frozenColumnIndex;\n                        rightCol.colspan = col.colspan - leftCol.colspan;\n\n                        tempTable_l.rows[r].cols.push(leftCol);\n                        tempTable_r.rows[r].cols.push(rightCol);\n                    }\n                }\n                else {\n                    // 오른편\n                    tempTable_r.rows[r].cols.push(col);\n                }\n            }\n        }\n\n        return {\n            leftData: tempTable_l,\n            rightData: tempTable_r\n        }\n    };\n\n    const getTableByStartEndColumnIndex = function (_table, _startColumnIndex, _endColumnIndex) {\n\n        let tempTable = {rows: []};\n        for (let r = 0, rl = _table.rows.length; r < rl; r++) {\n            let row = _table.rows[r];\n\n            tempTable.rows[r] = {cols: []};\n            for (let c = 0, cl = row.cols.length; c < cl; c++) {\n                let col = jQuery.extend({}, row.cols[c]),\n                    colStartIndex = col.colIndex, colEndIndex = col.colIndex + col.colspan;\n\n                if(_startColumnIndex <= colStartIndex || colEndIndex <= _endColumnIndex){\n                    if(_startColumnIndex <= colStartIndex && colEndIndex <= _endColumnIndex){\n                        // 변형없이 추가\n                        tempTable.rows[r].cols.push(col);\n                    }\n                    else if(_startColumnIndex > colStartIndex && colEndIndex > _startColumnIndex){\n                        // 앞에서 걸친경우\n                        col.colspan = colEndIndex - _startColumnIndex;\n                        tempTable.rows[r].cols.push(col);\n                    }\n                    else if(colEndIndex > _endColumnIndex && colStartIndex <= _endColumnIndex){\n                        tempTable.rows[r].cols.push(col);\n                    }\n                }\n            }\n        }\n\n        return tempTable;\n    };\n\n    var getMousePosition = function (e) {\n        var mouseObj, originalEvent = (e.originalEvent) ? e.originalEvent : e;\n        mouseObj = ('changedTouches' in originalEvent) ? originalEvent.changedTouches[0] : originalEvent;\n        // clientX, Y 쓰면 스크롤에서 문제 발생\n        return {\n            clientX: mouseObj.pageX,\n            clientY: mouseObj.pageY\n        }\n    };\n\n    var ENM = {\n        \"mousedown\": (ax5.info.supportTouch) ? \"touchstart\" : \"mousedown\",\n        \"mousemove\": (ax5.info.supportTouch) ? \"touchmove\" : \"mousemove\",\n        \"mouseup\": (ax5.info.supportTouch) ? \"touchend\" : \"mouseup\"\n    };\n\n    var makeHeaderTable = function (_columns) {\n        var columns = U.deepCopy(_columns);\n        var cfg = this.config;\n        var table = {\n            rows: []\n        };\n        var colIndex = 0;\n        var maekRows = function (_columns, depth, parentField) {\n            var row = {cols: []};\n            var i = 0, l = _columns.length;\n\n            for (; i < l; i++) {\n                var field = _columns[i];\n                var colspan = 1;\n\n                if (!field.hidden) {\n                    field.colspan = 1;\n                    field.rowspan = 1;\n\n                    field.rowIndex = depth;\n                    field.colIndex = (function () {\n                        if (!parentField) {\n                            return colIndex++;\n                        } else {\n                            colIndex = parentField.colIndex + i + 1;\n                            return parentField.colIndex + i;\n                        }\n                    })();\n\n                    row.cols.push(field);\n\n                    if ('columns' in field) {\n                        colspan = maekRows(field.columns, depth + 1, field);\n                    } else {\n                        field.width = ('width' in field) ? field.width : cfg.columnMinWidth;\n                    }\n                    field.colspan = colspan;\n                } else {\n\n\n                }\n            }\n\n            if (row.cols.length > 0) {\n                if (!table.rows[depth]) {\n                    table.rows[depth] = {cols: []};\n                }\n                table.rows[depth].cols = table.rows[depth].cols.concat(row.cols);\n                return (row.cols.length - 1) + colspan;\n            } else {\n                return colspan;\n            }\n\n        };\n        maekRows(columns, 0);\n\n        // set rowspan\n        for (var r = 0, rl = table.rows.length; r < rl; r++) {\n            for (var c = 0, cl = table.rows[r].cols.length; c < cl; c++) {\n                if (!('columns' in table.rows[r].cols[c])) {\n                    table.rows[r].cols[c].rowspan = rl - r;\n                }\n            }\n        }\n\n        return table;\n    };\n\n    var makeBodyRowTable = function (_columns) {\n        var columns = U.deepCopy(_columns);\n        var table = {\n            rows: []\n        };\n        var colIndex = 0;\n        var maekRows = function (_columns, depth, parentField) {\n            var row = {cols: []};\n            var i = 0, l = _columns.length;\n\n            var selfMakeRow = function (__columns) {\n                var i = 0, l = __columns.length;\n                for (; i < l; i++) {\n                    var field = __columns[i];\n                    var colspan = 1;\n\n                    if (!field.hidden) {\n\n                        if ('key' in field) {\n                            field.colspan = 1;\n                            field.rowspan = 1;\n\n                            field.rowIndex = depth;\n                            field.colIndex = (function () {\n                                if (!parentField) {\n                                    return colIndex++;\n                                } else {\n                                    colIndex = parentField.colIndex + i + 1;\n                                    return parentField.colIndex + i;\n                                }\n                            })();\n\n                            row.cols.push(field);\n                            if ('columns' in field) {\n                                colspan = maekRows(field.columns, depth + 1, field);\n                            }\n                            field.colspan = colspan;\n                        }\n                        else {\n                            if ('columns' in field) {\n                                selfMakeRow(field.columns, depth);\n                            }\n                        }\n                    } else {\n\n                    }\n                }\n            };\n\n            for (; i < l; i++) {\n                var field = _columns[i];\n                var colspan = 1;\n\n                if (!field.hidden) {\n\n                    if ('key' in field) {\n                        field.colspan = 1;\n                        field.rowspan = 1;\n\n                        field.rowIndex = depth;\n                        field.colIndex = (function () {\n                            if (!parentField) {\n                                return colIndex++;\n                            } else {\n                                colIndex = parentField.colIndex + i + 1;\n                                return parentField.colIndex + i;\n                            }\n                        })();\n\n                        row.cols.push(field);\n                        if ('columns' in field) {\n                            colspan = maekRows(field.columns, depth + 1, field);\n                        }\n                        field.colspan = colspan;\n                    }\n                    else {\n                        if ('columns' in field) {\n                            selfMakeRow(field.columns, depth);\n                        }\n                    }\n                } else {\n\n                }\n            }\n\n            if (row.cols.length > 0) {\n                if (!table.rows[depth]) {\n                    table.rows[depth] = {cols: []};\n                }\n                table.rows[depth].cols = table.rows[depth].cols.concat(row.cols);\n                return (row.cols.length - 1) + colspan;\n            } else {\n                return colspan;\n            }\n\n        };\n        maekRows(columns, 0);\n\n        (function (table) {\n            // set rowspan\n            for (var r = 0, rl = table.rows.length; r < rl; r++) {\n                var row = table.rows[r];\n                for (var c = 0, cl = row.cols.length; c < cl; c++) {\n                    var col = row.cols[c];\n                    if (!('columns' in col)) {\n                        col.rowspan = rl - r;\n                    }\n                }\n            }\n        })(table);\n\n        return table;\n    };\n\n    var makeBodyRowMap = function (_table) {\n        var map = {};\n        _table.rows.forEach(function (row) {\n            row.cols.forEach(function (col) {\n                map[col.rowIndex + \"_\" + col.colIndex] = jQuery.extend({}, col);\n            });\n        });\n        return map;\n    };\n\n    let makeFootSumTable = function (_footSumColumns) {\n        let table = {\n            rows: []\n        };\n\n        for (var r = 0, rl = _footSumColumns.length; r < rl; r++) {\n            var footSumRow = _footSumColumns[r],\n                addC = 0;\n\n            table.rows[r] = {cols: []};\n\n            for (var c = 0, cl = footSumRow.length; c < cl; c++) {\n                if (addC > this.colGroup.length) break;\n                var colspan = footSumRow[c].colspan || 1;\n                if (footSumRow[c].label || footSumRow[c].key) {\n                    table.rows[r].cols.push({\n                        colspan: colspan,\n                        rowspan: 1,\n                        colIndex: addC,\n                        columnAttr: \"sum\",\n                        align: footSumRow[c].align,\n                        label: footSumRow[c].label,\n                        key: footSumRow[c].key,\n                        collector: footSumRow[c].collector,\n                        formatter: footSumRow[c].formatter\n                    });\n                } else {\n                    table.rows[r].cols.push({\n                        colIndex: addC,\n                        colspan: colspan,\n                        rowspan: 1,\n                        label: \"&nbsp;\",\n                    });\n                }\n                addC += colspan;\n                colspan = null;\n            }\n            \n            if (addC < this.colGroup.length) {\n                for (var c = addC; c < this.colGroup.length; c++) {\n                    table.rows[r].cols.push({\n                        colIndex: (c),\n                        colspan: 1,\n                        rowspan: 1,\n                        label: \"&nbsp;\",\n                    });\n                }\n            }\n            footSumRow = null;\n            addC = null;\n        }\n\n        return table;\n    };\n\n    let makeBodyGroupingTable = function (_bodyGroupingColumns) {\n        let table = {\n            rows: []\n        }, r = 0, addC = 0;\n\n        table.rows[r] = {cols: []};\n        for (let c = 0, cl = _bodyGroupingColumns.length; c < cl; c++) {\n            if (addC > this.columns.length) break;\n            let colspan = _bodyGroupingColumns[c].colspan || 1;\n            if (_bodyGroupingColumns[c].label || _bodyGroupingColumns[c].key) {\n                table.rows[r].cols.push({\n                    colspan: colspan,\n                    rowspan: 1,\n                    rowIndex: 0,\n                    colIndex: addC,\n                    columnAttr: \"default\",\n                    align: _bodyGroupingColumns[c].align,\n                    label: _bodyGroupingColumns[c].label,\n                    key: _bodyGroupingColumns[c].key,\n                    collector: _bodyGroupingColumns[c].collector,\n                    formatter: _bodyGroupingColumns[c].formatter\n                });\n            } else {\n                table.rows[r].cols.push({\n                    rowIndex: 0,\n                    colIndex: addC,\n                    colspan: colspan,\n                    rowspan: 1,\n                    label: \"&nbsp;\"\n                });\n            }\n            addC += colspan;\n        }\n\n        if (addC < this.colGroup.length) {\n            for (var c = addC; c < this.colGroup.length; c++) {\n                table.rows[r].cols.push({\n                    rowIndex: 0,\n                    colIndex: (c),\n                    colspan: 1,\n                    rowspan: 1,\n                    label: \"&nbsp;\",\n                });\n            }\n        }\n\n        return table;\n    };\n\n    let findPanelByColumnIndex = function (_dindex, _colIndex, _rowIndex) {\n        let _containerPanelName,\n            _isScrollPanel = false,\n            _panels = [];\n\n        if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n        if (this.xvar.frozenColumnIndex > _colIndex) _panels.push(\"left\");\n        _panels.push(\"body\");\n\n        if (this.xvar.frozenColumnIndex <= _colIndex || this.xvar.frozenRowIndex <= _dindex) {\n            _containerPanelName = _panels.join(\"-\");\n            _panels.push(\"scroll\");\n            _isScrollPanel = true;\n        }\n\n        return {\n            panelName: _panels.join(\"-\"),\n            containerPanelName: _containerPanelName,\n            isScrollPanel: _isScrollPanel\n        }\n    };\n\n    let getRealPathForDataItem = function (_dataPath) {\n        let path = [],\n            _path = [].concat(_dataPath.split(/[\\.\\[\\]]/g));\n\n        _path.forEach(function (n) {\n            if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n        });\n        _path = null;\n        return path.join(\"\");\n    };\n\n\n    GRID.util = {\n        divideTableByFrozenColumnIndex: divideTableByFrozenColumnIndex,\n        getTableByStartEndColumnIndex: getTableByStartEndColumnIndex,\n        getMousePosition: getMousePosition,\n        ENM: ENM,\n        makeHeaderTable: makeHeaderTable,\n        makeBodyRowTable: makeBodyRowTable,\n        makeBodyRowMap: makeBodyRowMap,\n        makeFootSumTable: makeFootSumTable,\n        makeBodyGroupingTable: makeBodyGroupingTable,\n        findPanelByColumnIndex: findPanelByColumnIndex,\n        getRealPathForDataItem: getRealPathForDataItem,\n    };\n\n})();"]}